-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity image_filter is
port (
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of image_filter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "image_filter,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a75tfgg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.698000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=27,HLS_SYN_DSP=0,HLS_SYN_FF=3291,HLS_SYN_LUT=9455,HLS_VERSION=2018_2}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_INPUT_STREAM_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal Sobel_U0_ap_start : STD_LOGIC;
    signal Sobel_U0_ap_done : STD_LOGIC;
    signal Sobel_U0_ap_continue : STD_LOGIC;
    signal Sobel_U0_ap_idle : STD_LOGIC;
    signal Sobel_U0_ap_ready : STD_LOGIC;
    signal Sobel_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal Sobel_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal Sobel_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal Sobel_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Sobel_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal Sobel_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Sobel_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal Sobel_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Sobel_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal SubS_U0_ap_start : STD_LOGIC;
    signal SubS_U0_ap_done : STD_LOGIC;
    signal SubS_U0_ap_continue : STD_LOGIC;
    signal SubS_U0_ap_idle : STD_LOGIC;
    signal SubS_U0_ap_ready : STD_LOGIC;
    signal SubS_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal SubS_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal SubS_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal SubS_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal SubS_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal SubS_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal SubS_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal SubS_U0_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal SubS_U0_dst_data_stream_2_V_write : STD_LOGIC;
    signal Scale_U0_ap_start : STD_LOGIC;
    signal Scale_U0_ap_done : STD_LOGIC;
    signal Scale_U0_ap_continue : STD_LOGIC;
    signal Scale_U0_ap_idle : STD_LOGIC;
    signal Scale_U0_ap_ready : STD_LOGIC;
    signal Scale_U0_src_data_stream_0_V_read : STD_LOGIC;
    signal Scale_U0_src_data_stream_1_V_read : STD_LOGIC;
    signal Scale_U0_src_data_stream_2_V_read : STD_LOGIC;
    signal Scale_U0_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Scale_U0_dst_data_stream_0_V_write : STD_LOGIC;
    signal Scale_U0_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Scale_U0_dst_data_stream_1_V_write : STD_LOGIC;
    signal Scale_U0_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Scale_U0_dst_data_stream_2_V_write : STD_LOGIC;
    signal Erode_U0_ap_start : STD_LOGIC;
    signal Erode_U0_ap_done : STD_LOGIC;
    signal Erode_U0_ap_continue : STD_LOGIC;
    signal Erode_U0_ap_idle : STD_LOGIC;
    signal Erode_U0_ap_ready : STD_LOGIC;
    signal Erode_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal Erode_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal Erode_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal Erode_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Erode_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal Erode_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Erode_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal Erode_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Erode_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal Dilate_U0_ap_start : STD_LOGIC;
    signal Dilate_U0_ap_done : STD_LOGIC;
    signal Dilate_U0_ap_continue : STD_LOGIC;
    signal Dilate_U0_ap_idle : STD_LOGIC;
    signal Dilate_U0_ap_ready : STD_LOGIC;
    signal Dilate_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal Dilate_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal Dilate_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal Dilate_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Dilate_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal Dilate_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Dilate_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal Dilate_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Dilate_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal img_0_data_stream_0_full_n : STD_LOGIC;
    signal img_0_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_full_n : STD_LOGIC;
    signal img_0_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_empty_n : STD_LOGIC;
    signal img_0_data_stream_2_full_n : STD_LOGIC;
    signal img_0_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_empty_n : STD_LOGIC;
    signal img_1_data_stream_0_full_n : STD_LOGIC;
    signal img_1_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_0_empty_n : STD_LOGIC;
    signal img_1_data_stream_1_full_n : STD_LOGIC;
    signal img_1_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_1_empty_n : STD_LOGIC;
    signal img_1_data_stream_2_full_n : STD_LOGIC;
    signal img_1_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_1_data_stream_2_empty_n : STD_LOGIC;
    signal img_2_data_stream_0_full_n : STD_LOGIC;
    signal img_2_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_0_empty_n : STD_LOGIC;
    signal img_2_data_stream_1_full_n : STD_LOGIC;
    signal img_2_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_1_empty_n : STD_LOGIC;
    signal img_2_data_stream_2_full_n : STD_LOGIC;
    signal img_2_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_2_data_stream_2_empty_n : STD_LOGIC;
    signal img_3_data_stream_0_full_n : STD_LOGIC;
    signal img_3_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_0_empty_n : STD_LOGIC;
    signal img_3_data_stream_1_full_n : STD_LOGIC;
    signal img_3_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_1_empty_n : STD_LOGIC;
    signal img_3_data_stream_2_full_n : STD_LOGIC;
    signal img_3_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_3_data_stream_2_empty_n : STD_LOGIC;
    signal img_4_data_stream_0_full_n : STD_LOGIC;
    signal img_4_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_4_data_stream_0_empty_n : STD_LOGIC;
    signal img_4_data_stream_1_full_n : STD_LOGIC;
    signal img_4_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_4_data_stream_1_empty_n : STD_LOGIC;
    signal img_4_data_stream_2_full_n : STD_LOGIC;
    signal img_4_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_4_data_stream_2_empty_n : STD_LOGIC;
    signal img_5_data_stream_0_full_n : STD_LOGIC;
    signal img_5_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_5_data_stream_0_empty_n : STD_LOGIC;
    signal img_5_data_stream_1_full_n : STD_LOGIC;
    signal img_5_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_5_data_stream_1_empty_n : STD_LOGIC;
    signal img_5_data_stream_2_full_n : STD_LOGIC;
    signal img_5_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_5_data_stream_2_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_full_n : STD_LOGIC;
    signal AXIvideo2Mat_U0_start_write : STD_LOGIC;
    signal Sobel_U0_start_full_n : STD_LOGIC;
    signal Sobel_U0_start_write : STD_LOGIC;
    signal SubS_U0_start_full_n : STD_LOGIC;
    signal SubS_U0_start_write : STD_LOGIC;
    signal Scale_U0_start_full_n : STD_LOGIC;
    signal Scale_U0_start_write : STD_LOGIC;
    signal Erode_U0_start_full_n : STD_LOGIC;
    signal Erode_U0_start_write : STD_LOGIC;
    signal Dilate_U0_start_full_n : STD_LOGIC;
    signal Dilate_U0_start_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Sobel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component SubS IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Scale IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_0_V_empty_n : IN STD_LOGIC;
        src_data_stream_0_V_read : OUT STD_LOGIC;
        src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_1_V_empty_n : IN STD_LOGIC;
        src_data_stream_1_V_read : OUT STD_LOGIC;
        src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        src_data_stream_2_V_empty_n : IN STD_LOGIC;
        src_data_stream_2_V_read : OUT STD_LOGIC;
        dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_0_V_full_n : IN STD_LOGIC;
        dst_data_stream_0_V_write : OUT STD_LOGIC;
        dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_1_V_full_n : IN STD_LOGIC;
        dst_data_stream_1_V_write : OUT STD_LOGIC;
        dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dst_data_stream_2_V_full_n : IN STD_LOGIC;
        dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Erode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Dilate IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        img_cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        INPUT_STREAM_TDATA => INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID => INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY => AXIvideo2Mat_U0_INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP => INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB => INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER => INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST => INPUT_STREAM_TLAST,
        INPUT_STREAM_TID => INPUT_STREAM_TID,
        INPUT_STREAM_TDEST => INPUT_STREAM_TDEST,
        img_rows_V => rows,
        img_cols_V => cols,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => img_0_data_stream_0_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => img_0_data_stream_1_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => img_0_data_stream_2_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write);

    Sobel_U0 : component Sobel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Sobel_U0_ap_start,
        ap_done => Sobel_U0_ap_done,
        ap_continue => Sobel_U0_ap_continue,
        ap_idle => Sobel_U0_ap_idle,
        ap_ready => Sobel_U0_ap_ready,
        p_src_rows_V => rows,
        p_src_cols_V => cols,
        p_src_data_stream_0_V_dout => img_0_data_stream_0_dout,
        p_src_data_stream_0_V_empty_n => img_0_data_stream_0_empty_n,
        p_src_data_stream_0_V_read => Sobel_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img_0_data_stream_1_dout,
        p_src_data_stream_1_V_empty_n => img_0_data_stream_1_empty_n,
        p_src_data_stream_1_V_read => Sobel_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img_0_data_stream_2_dout,
        p_src_data_stream_2_V_empty_n => img_0_data_stream_2_empty_n,
        p_src_data_stream_2_V_read => Sobel_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => Sobel_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img_1_data_stream_0_full_n,
        p_dst_data_stream_0_V_write => Sobel_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => Sobel_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img_1_data_stream_1_full_n,
        p_dst_data_stream_1_V_write => Sobel_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => Sobel_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img_1_data_stream_2_full_n,
        p_dst_data_stream_2_V_write => Sobel_U0_p_dst_data_stream_2_V_write);

    SubS_U0 : component SubS
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => SubS_U0_ap_start,
        ap_done => SubS_U0_ap_done,
        ap_continue => SubS_U0_ap_continue,
        ap_idle => SubS_U0_ap_idle,
        ap_ready => SubS_U0_ap_ready,
        src_rows_V => rows,
        src_cols_V => cols,
        src_data_stream_0_V_dout => img_1_data_stream_0_dout,
        src_data_stream_0_V_empty_n => img_1_data_stream_0_empty_n,
        src_data_stream_0_V_read => SubS_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => img_1_data_stream_1_dout,
        src_data_stream_1_V_empty_n => img_1_data_stream_1_empty_n,
        src_data_stream_1_V_read => SubS_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => img_1_data_stream_2_dout,
        src_data_stream_2_V_empty_n => img_1_data_stream_2_empty_n,
        src_data_stream_2_V_read => SubS_U0_src_data_stream_2_V_read,
        dst_data_stream_0_V_din => SubS_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => img_2_data_stream_0_full_n,
        dst_data_stream_0_V_write => SubS_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => SubS_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => img_2_data_stream_1_full_n,
        dst_data_stream_1_V_write => SubS_U0_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => SubS_U0_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => img_2_data_stream_2_full_n,
        dst_data_stream_2_V_write => SubS_U0_dst_data_stream_2_V_write);

    Scale_U0 : component Scale
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Scale_U0_ap_start,
        ap_done => Scale_U0_ap_done,
        ap_continue => Scale_U0_ap_continue,
        ap_idle => Scale_U0_ap_idle,
        ap_ready => Scale_U0_ap_ready,
        src_rows_V => rows,
        src_cols_V => cols,
        src_data_stream_0_V_dout => img_2_data_stream_0_dout,
        src_data_stream_0_V_empty_n => img_2_data_stream_0_empty_n,
        src_data_stream_0_V_read => Scale_U0_src_data_stream_0_V_read,
        src_data_stream_1_V_dout => img_2_data_stream_1_dout,
        src_data_stream_1_V_empty_n => img_2_data_stream_1_empty_n,
        src_data_stream_1_V_read => Scale_U0_src_data_stream_1_V_read,
        src_data_stream_2_V_dout => img_2_data_stream_2_dout,
        src_data_stream_2_V_empty_n => img_2_data_stream_2_empty_n,
        src_data_stream_2_V_read => Scale_U0_src_data_stream_2_V_read,
        dst_data_stream_0_V_din => Scale_U0_dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n => img_3_data_stream_0_full_n,
        dst_data_stream_0_V_write => Scale_U0_dst_data_stream_0_V_write,
        dst_data_stream_1_V_din => Scale_U0_dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n => img_3_data_stream_1_full_n,
        dst_data_stream_1_V_write => Scale_U0_dst_data_stream_1_V_write,
        dst_data_stream_2_V_din => Scale_U0_dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n => img_3_data_stream_2_full_n,
        dst_data_stream_2_V_write => Scale_U0_dst_data_stream_2_V_write);

    Erode_U0 : component Erode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Erode_U0_ap_start,
        ap_done => Erode_U0_ap_done,
        ap_continue => Erode_U0_ap_continue,
        ap_idle => Erode_U0_ap_idle,
        ap_ready => Erode_U0_ap_ready,
        p_src_rows_V => rows,
        p_src_cols_V => cols,
        p_src_data_stream_0_V_dout => img_3_data_stream_0_dout,
        p_src_data_stream_0_V_empty_n => img_3_data_stream_0_empty_n,
        p_src_data_stream_0_V_read => Erode_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img_3_data_stream_1_dout,
        p_src_data_stream_1_V_empty_n => img_3_data_stream_1_empty_n,
        p_src_data_stream_1_V_read => Erode_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img_3_data_stream_2_dout,
        p_src_data_stream_2_V_empty_n => img_3_data_stream_2_empty_n,
        p_src_data_stream_2_V_read => Erode_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => Erode_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img_4_data_stream_0_full_n,
        p_dst_data_stream_0_V_write => Erode_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => Erode_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img_4_data_stream_1_full_n,
        p_dst_data_stream_1_V_write => Erode_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => Erode_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img_4_data_stream_2_full_n,
        p_dst_data_stream_2_V_write => Erode_U0_p_dst_data_stream_2_V_write);

    Dilate_U0 : component Dilate
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Dilate_U0_ap_start,
        ap_done => Dilate_U0_ap_done,
        ap_continue => Dilate_U0_ap_continue,
        ap_idle => Dilate_U0_ap_idle,
        ap_ready => Dilate_U0_ap_ready,
        p_src_rows_V => rows,
        p_src_cols_V => cols,
        p_src_data_stream_0_V_dout => img_4_data_stream_0_dout,
        p_src_data_stream_0_V_empty_n => img_4_data_stream_0_empty_n,
        p_src_data_stream_0_V_read => Dilate_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => img_4_data_stream_1_dout,
        p_src_data_stream_1_V_empty_n => img_4_data_stream_1_empty_n,
        p_src_data_stream_1_V_read => Dilate_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => img_4_data_stream_2_dout,
        p_src_data_stream_2_V_empty_n => img_4_data_stream_2_empty_n,
        p_src_data_stream_2_V_read => Dilate_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => Dilate_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => img_5_data_stream_0_full_n,
        p_dst_data_stream_0_V_write => Dilate_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => Dilate_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => img_5_data_stream_1_full_n,
        p_dst_data_stream_1_V_write => Dilate_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => Dilate_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => img_5_data_stream_2_full_n,
        p_dst_data_stream_2_V_write => Dilate_U0_p_dst_data_stream_2_V_write);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_rows_V => rows,
        img_cols_V => cols,
        img_data_stream_0_V_dout => img_5_data_stream_0_dout,
        img_data_stream_0_V_empty_n => img_5_data_stream_0_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img_5_data_stream_1_dout,
        img_data_stream_1_V_empty_n => img_5_data_stream_1_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img_5_data_stream_2_dout,
        img_data_stream_2_V_empty_n => img_5_data_stream_2_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_U0_img_data_stream_2_V_read,
        OUTPUT_STREAM_TDATA => Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID => Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY => OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP => Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB => Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER => Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST => Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID => Mat2AXIvideo_U0_OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST => Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST);

    img_0_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_dout,
        if_empty_n => img_0_data_stream_0_empty_n,
        if_read => Sobel_U0_p_src_data_stream_0_V_read);

    img_0_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => img_0_data_stream_1_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => img_0_data_stream_1_dout,
        if_empty_n => img_0_data_stream_1_empty_n,
        if_read => Sobel_U0_p_src_data_stream_1_V_read);

    img_0_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => img_0_data_stream_2_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => img_0_data_stream_2_dout,
        if_empty_n => img_0_data_stream_2_empty_n,
        if_read => Sobel_U0_p_src_data_stream_2_V_read);

    img_1_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Sobel_U0_p_dst_data_stream_0_V_din,
        if_full_n => img_1_data_stream_0_full_n,
        if_write => Sobel_U0_p_dst_data_stream_0_V_write,
        if_dout => img_1_data_stream_0_dout,
        if_empty_n => img_1_data_stream_0_empty_n,
        if_read => SubS_U0_src_data_stream_0_V_read);

    img_1_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Sobel_U0_p_dst_data_stream_1_V_din,
        if_full_n => img_1_data_stream_1_full_n,
        if_write => Sobel_U0_p_dst_data_stream_1_V_write,
        if_dout => img_1_data_stream_1_dout,
        if_empty_n => img_1_data_stream_1_empty_n,
        if_read => SubS_U0_src_data_stream_1_V_read);

    img_1_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Sobel_U0_p_dst_data_stream_2_V_din,
        if_full_n => img_1_data_stream_2_full_n,
        if_write => Sobel_U0_p_dst_data_stream_2_V_write,
        if_dout => img_1_data_stream_2_dout,
        if_empty_n => img_1_data_stream_2_empty_n,
        if_read => SubS_U0_src_data_stream_2_V_read);

    img_2_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SubS_U0_dst_data_stream_0_V_din,
        if_full_n => img_2_data_stream_0_full_n,
        if_write => SubS_U0_dst_data_stream_0_V_write,
        if_dout => img_2_data_stream_0_dout,
        if_empty_n => img_2_data_stream_0_empty_n,
        if_read => Scale_U0_src_data_stream_0_V_read);

    img_2_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SubS_U0_dst_data_stream_1_V_din,
        if_full_n => img_2_data_stream_1_full_n,
        if_write => SubS_U0_dst_data_stream_1_V_write,
        if_dout => img_2_data_stream_1_dout,
        if_empty_n => img_2_data_stream_1_empty_n,
        if_read => Scale_U0_src_data_stream_1_V_read);

    img_2_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => SubS_U0_dst_data_stream_2_V_din,
        if_full_n => img_2_data_stream_2_full_n,
        if_write => SubS_U0_dst_data_stream_2_V_write,
        if_dout => img_2_data_stream_2_dout,
        if_empty_n => img_2_data_stream_2_empty_n,
        if_read => Scale_U0_src_data_stream_2_V_read);

    img_3_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Scale_U0_dst_data_stream_0_V_din,
        if_full_n => img_3_data_stream_0_full_n,
        if_write => Scale_U0_dst_data_stream_0_V_write,
        if_dout => img_3_data_stream_0_dout,
        if_empty_n => img_3_data_stream_0_empty_n,
        if_read => Erode_U0_p_src_data_stream_0_V_read);

    img_3_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Scale_U0_dst_data_stream_1_V_din,
        if_full_n => img_3_data_stream_1_full_n,
        if_write => Scale_U0_dst_data_stream_1_V_write,
        if_dout => img_3_data_stream_1_dout,
        if_empty_n => img_3_data_stream_1_empty_n,
        if_read => Erode_U0_p_src_data_stream_1_V_read);

    img_3_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Scale_U0_dst_data_stream_2_V_din,
        if_full_n => img_3_data_stream_2_full_n,
        if_write => Scale_U0_dst_data_stream_2_V_write,
        if_dout => img_3_data_stream_2_dout,
        if_empty_n => img_3_data_stream_2_empty_n,
        if_read => Erode_U0_p_src_data_stream_2_V_read);

    img_4_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Erode_U0_p_dst_data_stream_0_V_din,
        if_full_n => img_4_data_stream_0_full_n,
        if_write => Erode_U0_p_dst_data_stream_0_V_write,
        if_dout => img_4_data_stream_0_dout,
        if_empty_n => img_4_data_stream_0_empty_n,
        if_read => Dilate_U0_p_src_data_stream_0_V_read);

    img_4_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Erode_U0_p_dst_data_stream_1_V_din,
        if_full_n => img_4_data_stream_1_full_n,
        if_write => Erode_U0_p_dst_data_stream_1_V_write,
        if_dout => img_4_data_stream_1_dout,
        if_empty_n => img_4_data_stream_1_empty_n,
        if_read => Dilate_U0_p_src_data_stream_1_V_read);

    img_4_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Erode_U0_p_dst_data_stream_2_V_din,
        if_full_n => img_4_data_stream_2_full_n,
        if_write => Erode_U0_p_dst_data_stream_2_V_write,
        if_dout => img_4_data_stream_2_dout,
        if_empty_n => img_4_data_stream_2_empty_n,
        if_read => Dilate_U0_p_src_data_stream_2_V_read);

    img_5_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Dilate_U0_p_dst_data_stream_0_V_din,
        if_full_n => img_5_data_stream_0_full_n,
        if_write => Dilate_U0_p_dst_data_stream_0_V_write,
        if_dout => img_5_data_stream_0_dout,
        if_empty_n => img_5_data_stream_0_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_0_V_read);

    img_5_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Dilate_U0_p_dst_data_stream_1_V_din,
        if_full_n => img_5_data_stream_1_full_n,
        if_write => Dilate_U0_p_dst_data_stream_1_V_write,
        if_dout => img_5_data_stream_1_dout,
        if_empty_n => img_5_data_stream_1_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_1_V_read);

    img_5_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Dilate_U0_p_dst_data_stream_2_V_din,
        if_full_n => img_5_data_stream_2_full_n,
        if_write => Dilate_U0_p_dst_data_stream_2_V_write,
        if_dout => img_5_data_stream_2_dout,
        if_empty_n => img_5_data_stream_2_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_2_V_read);




    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= (ap_start);
    AXIvideo2Mat_U0_start_full_n <= ap_const_logic_1;
    AXIvideo2Mat_U0_start_write <= ap_const_logic_0;
    Dilate_U0_ap_continue <= ap_const_logic_1;
    Dilate_U0_ap_start <= ap_start;
    Dilate_U0_start_full_n <= ap_const_logic_1;
    Dilate_U0_start_write <= ap_const_logic_0;
    Erode_U0_ap_continue <= ap_const_logic_1;
    Erode_U0_ap_start <= ap_start;
    Erode_U0_start_full_n <= ap_const_logic_1;
    Erode_U0_start_write <= ap_const_logic_0;
    INPUT_STREAM_TREADY <= AXIvideo2Mat_U0_INPUT_STREAM_TREADY;
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= ap_start;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    OUTPUT_STREAM_TDATA <= Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA;
    OUTPUT_STREAM_TDEST <= Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST;
    OUTPUT_STREAM_TID <= Mat2AXIvideo_U0_OUTPUT_STREAM_TID;
    OUTPUT_STREAM_TKEEP <= Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP;
    OUTPUT_STREAM_TLAST <= Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST;
    OUTPUT_STREAM_TSTRB <= Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB;
    OUTPUT_STREAM_TUSER <= Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER;
    OUTPUT_STREAM_TVALID <= Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID;
    Scale_U0_ap_continue <= ap_const_logic_1;
    Scale_U0_ap_start <= ap_start;
    Scale_U0_start_full_n <= ap_const_logic_1;
    Scale_U0_start_write <= ap_const_logic_0;
    Sobel_U0_ap_continue <= ap_const_logic_1;
    Sobel_U0_ap_start <= ap_start;
    Sobel_U0_start_full_n <= ap_const_logic_1;
    Sobel_U0_start_write <= ap_const_logic_0;
    SubS_U0_ap_continue <= ap_const_logic_1;
    SubS_U0_ap_start <= ap_start;
    SubS_U0_start_full_n <= ap_const_logic_1;
    SubS_U0_start_write <= ap_const_logic_0;
    ap_done <= Mat2AXIvideo_U0_ap_done;
    ap_idle <= (SubS_U0_ap_idle and Sobel_U0_ap_idle and Scale_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and Erode_U0_ap_idle and Dilate_U0_ap_idle and AXIvideo2Mat_U0_ap_idle);
    ap_ready <= AXIvideo2Mat_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Mat2AXIvideo_U0_ap_done;
    ap_sync_ready <= AXIvideo2Mat_U0_ap_ready;
end behav;
