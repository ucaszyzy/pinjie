// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================


#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#define AP_INT_MAX_W 32678

#include "ap_int.h"

#include "hls_stream.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;
// [define_apint] ---------->
template< int D ,int U ,int TI ,int TD > struct ap_axiu ;
template<> struct  ap_axiu<32, 1, 1, 1> {
ap_uint<32> data;
ap_uint<4> keep;
ap_uint<4> strb;
ap_uint<1> user;
ap_uint<1> last;
ap_uint<1> id;
ap_uint<1> dest;
}; 



   #define AUTOTB_TVIN_INPUT_STREAM_V_data_V  "../tv/cdatafile/c.image_filter.autotvin_INPUT_STREAM_V_data_V.dat"
   #define WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_data_V  "../tv/stream_size/stream_size_in_INPUT_STREAM_V_data_V.dat"
   #define AUTOTB_TVIN_INPUT_STREAM_V_keep_V  "../tv/cdatafile/c.image_filter.autotvin_INPUT_STREAM_V_keep_V.dat"
   #define WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_keep_V  "../tv/stream_size/stream_size_in_INPUT_STREAM_V_keep_V.dat"
   #define AUTOTB_TVIN_INPUT_STREAM_V_strb_V  "../tv/cdatafile/c.image_filter.autotvin_INPUT_STREAM_V_strb_V.dat"
   #define WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_strb_V  "../tv/stream_size/stream_size_in_INPUT_STREAM_V_strb_V.dat"
   #define AUTOTB_TVIN_INPUT_STREAM_V_user_V  "../tv/cdatafile/c.image_filter.autotvin_INPUT_STREAM_V_user_V.dat"
   #define WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_user_V  "../tv/stream_size/stream_size_in_INPUT_STREAM_V_user_V.dat"
   #define AUTOTB_TVIN_INPUT_STREAM_V_last_V  "../tv/cdatafile/c.image_filter.autotvin_INPUT_STREAM_V_last_V.dat"
   #define WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_last_V  "../tv/stream_size/stream_size_in_INPUT_STREAM_V_last_V.dat"
   #define AUTOTB_TVIN_INPUT_STREAM_V_id_V  "../tv/cdatafile/c.image_filter.autotvin_INPUT_STREAM_V_id_V.dat"
   #define WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_id_V  "../tv/stream_size/stream_size_in_INPUT_STREAM_V_id_V.dat"
   #define AUTOTB_TVIN_INPUT_STREAM_V_dest_V  "../tv/cdatafile/c.image_filter.autotvin_INPUT_STREAM_V_dest_V.dat"
   #define WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_dest_V  "../tv/stream_size/stream_size_in_INPUT_STREAM_V_dest_V.dat"
   #define AUTOTB_TVOUT_OUTPUT_STREAM_V_data_V  "../tv/cdatafile/c.image_filter.autotvout_OUTPUT_STREAM_V_data_V.dat"
   #define AUTOTB_TVIN_OUTPUT_STREAM_V_data_V  "../tv/cdatafile/c.image_filter.autotvin_OUTPUT_STREAM_V_data_V.dat"
   #define WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_data_V  "../tv/stream_size/stream_size_out_OUTPUT_STREAM_V_data_V.dat"
   #define AUTOTB_TVOUT_OUTPUT_STREAM_V_keep_V  "../tv/cdatafile/c.image_filter.autotvout_OUTPUT_STREAM_V_keep_V.dat"
   #define AUTOTB_TVIN_OUTPUT_STREAM_V_keep_V  "../tv/cdatafile/c.image_filter.autotvin_OUTPUT_STREAM_V_keep_V.dat"
   #define WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_keep_V  "../tv/stream_size/stream_size_out_OUTPUT_STREAM_V_keep_V.dat"
   #define AUTOTB_TVOUT_OUTPUT_STREAM_V_strb_V  "../tv/cdatafile/c.image_filter.autotvout_OUTPUT_STREAM_V_strb_V.dat"
   #define AUTOTB_TVIN_OUTPUT_STREAM_V_strb_V  "../tv/cdatafile/c.image_filter.autotvin_OUTPUT_STREAM_V_strb_V.dat"
   #define WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_strb_V  "../tv/stream_size/stream_size_out_OUTPUT_STREAM_V_strb_V.dat"
   #define AUTOTB_TVOUT_OUTPUT_STREAM_V_user_V  "../tv/cdatafile/c.image_filter.autotvout_OUTPUT_STREAM_V_user_V.dat"
   #define AUTOTB_TVIN_OUTPUT_STREAM_V_user_V  "../tv/cdatafile/c.image_filter.autotvin_OUTPUT_STREAM_V_user_V.dat"
   #define WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_user_V  "../tv/stream_size/stream_size_out_OUTPUT_STREAM_V_user_V.dat"
   #define AUTOTB_TVOUT_OUTPUT_STREAM_V_last_V  "../tv/cdatafile/c.image_filter.autotvout_OUTPUT_STREAM_V_last_V.dat"
   #define AUTOTB_TVIN_OUTPUT_STREAM_V_last_V  "../tv/cdatafile/c.image_filter.autotvin_OUTPUT_STREAM_V_last_V.dat"
   #define WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_last_V  "../tv/stream_size/stream_size_out_OUTPUT_STREAM_V_last_V.dat"
   #define AUTOTB_TVOUT_OUTPUT_STREAM_V_id_V  "../tv/cdatafile/c.image_filter.autotvout_OUTPUT_STREAM_V_id_V.dat"
   #define AUTOTB_TVIN_OUTPUT_STREAM_V_id_V  "../tv/cdatafile/c.image_filter.autotvin_OUTPUT_STREAM_V_id_V.dat"
   #define WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_id_V  "../tv/stream_size/stream_size_out_OUTPUT_STREAM_V_id_V.dat"
   #define AUTOTB_TVOUT_OUTPUT_STREAM_V_dest_V  "../tv/cdatafile/c.image_filter.autotvout_OUTPUT_STREAM_V_dest_V.dat"
   #define AUTOTB_TVIN_OUTPUT_STREAM_V_dest_V  "../tv/cdatafile/c.image_filter.autotvin_OUTPUT_STREAM_V_dest_V.dat"
   #define WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_dest_V  "../tv/stream_size/stream_size_out_OUTPUT_STREAM_V_dest_V.dat"
   #define AUTOTB_TVIN_rows  "../tv/cdatafile/c.image_filter.autotvin_rows.dat"
   #define AUTOTB_TVIN_cols  "../tv/cdatafile/c.image_filter.autotvin_cols.dat"
   #define INTER_TCL  "../tv/cdatafile/ref.tcl"

   #define AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_data_V  "../tv/rtldatafile/rtl.image_filter.autotvout_OUTPUT_STREAM_V_data_V.dat"
   #define AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_keep_V  "../tv/rtldatafile/rtl.image_filter.autotvout_OUTPUT_STREAM_V_keep_V.dat"
   #define AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_strb_V  "../tv/rtldatafile/rtl.image_filter.autotvout_OUTPUT_STREAM_V_strb_V.dat"
   #define AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_user_V  "../tv/rtldatafile/rtl.image_filter.autotvout_OUTPUT_STREAM_V_user_V.dat"
   #define AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_last_V  "../tv/rtldatafile/rtl.image_filter.autotvout_OUTPUT_STREAM_V_last_V.dat"
   #define AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_id_V  "../tv/rtldatafile/rtl.image_filter.autotvout_OUTPUT_STREAM_V_id_V.dat"
   #define AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_dest_V  "../tv/rtldatafile/rtl.image_filter.autotvout_OUTPUT_STREAM_V_dest_V.dat"

class AESL_TRANSACTION {
    public:
        AESL_TRANSACTION(const char* name) {
            mName = (char *)malloc((strlen(name)+1)*sizeof(char));            strcpy(mName,name);
        }
        ~AESL_TRANSACTION() {
            free(mName);        }
    public:
        FILE* mFile;
        char* mName;
};

class INTER_TCL_FILE {
    public:
//functions
        INTER_TCL_FILE(const char* name) {
            mName = name;
            INPUT_STREAM_V_data_V_depth = 0;
            INPUT_STREAM_V_keep_V_depth = 0;
            INPUT_STREAM_V_strb_V_depth = 0;
            INPUT_STREAM_V_user_V_depth = 0;
            INPUT_STREAM_V_last_V_depth = 0;
            INPUT_STREAM_V_id_V_depth = 0;
            INPUT_STREAM_V_dest_V_depth = 0;
            OUTPUT_STREAM_V_data_V_depth = 0;
            OUTPUT_STREAM_V_keep_V_depth = 0;
            OUTPUT_STREAM_V_strb_V_depth = 0;
            OUTPUT_STREAM_V_user_V_depth = 0;
            OUTPUT_STREAM_V_last_V_depth = 0;
            OUTPUT_STREAM_V_id_V_depth = 0;
            OUTPUT_STREAM_V_dest_V_depth = 0;
            rows_depth = 0;
            cols_depth = 0;
            trans_num =0;
        }
        ~INTER_TCL_FILE() {
            mFile.open(mName);
            if (!mFile.good() ) {
                cout<<"Failed to open file ref.tcl."<<endl;
                exit (1);
            }
            string total_list = get_depth_list();
            mFile<<"set depth_list {\n";
            mFile<<total_list; 
            mFile<<"}\n";
            mFile<<"set trans_num "<<trans_num<<endl;
            mFile.close();
        }
        string get_depth_list () {
            stringstream total_list;
            total_list<<"   {INPUT_STREAM_V_data_V "<< INPUT_STREAM_V_data_V_depth << "}\n";
            total_list<<"   {INPUT_STREAM_V_keep_V "<< INPUT_STREAM_V_keep_V_depth << "}\n";
            total_list<<"   {INPUT_STREAM_V_strb_V "<< INPUT_STREAM_V_strb_V_depth << "}\n";
            total_list<<"   {INPUT_STREAM_V_user_V "<< INPUT_STREAM_V_user_V_depth << "}\n";
            total_list<<"   {INPUT_STREAM_V_last_V "<< INPUT_STREAM_V_last_V_depth << "}\n";
            total_list<<"   {INPUT_STREAM_V_id_V "<< INPUT_STREAM_V_id_V_depth << "}\n";
            total_list<<"   {INPUT_STREAM_V_dest_V "<< INPUT_STREAM_V_dest_V_depth << "}\n";
            total_list<<"   {OUTPUT_STREAM_V_data_V "<< OUTPUT_STREAM_V_data_V_depth << "}\n";
            total_list<<"   {OUTPUT_STREAM_V_keep_V "<< OUTPUT_STREAM_V_keep_V_depth << "}\n";
            total_list<<"   {OUTPUT_STREAM_V_strb_V "<< OUTPUT_STREAM_V_strb_V_depth << "}\n";
            total_list<<"   {OUTPUT_STREAM_V_user_V "<< OUTPUT_STREAM_V_user_V_depth << "}\n";
            total_list<<"   {OUTPUT_STREAM_V_last_V "<< OUTPUT_STREAM_V_last_V_depth << "}\n";
            total_list<<"   {OUTPUT_STREAM_V_id_V "<< OUTPUT_STREAM_V_id_V_depth << "}\n";
            total_list<<"   {OUTPUT_STREAM_V_dest_V "<< OUTPUT_STREAM_V_dest_V_depth << "}\n";
            total_list<<"   {rows "<< rows_depth << "}\n";
            total_list<<"   {cols "<< cols_depth << "}\n";
            return total_list.str();
        }
        void set_num (int num , int* class_num) {
            (*class_num) = (*class_num) > num ? (*class_num) : num;
        }
    public:
//variables
        int INPUT_STREAM_V_data_V_depth;
        int INPUT_STREAM_V_keep_V_depth;
        int INPUT_STREAM_V_strb_V_depth;
        int INPUT_STREAM_V_user_V_depth;
        int INPUT_STREAM_V_last_V_depth;
        int INPUT_STREAM_V_id_V_depth;
        int INPUT_STREAM_V_dest_V_depth;
        int OUTPUT_STREAM_V_data_V_depth;
        int OUTPUT_STREAM_V_keep_V_depth;
        int OUTPUT_STREAM_V_strb_V_depth;
        int OUTPUT_STREAM_V_user_V_depth;
        int OUTPUT_STREAM_V_last_V_depth;
        int OUTPUT_STREAM_V_id_V_depth;
        int OUTPUT_STREAM_V_dest_V_depth;
        int rows_depth;
        int cols_depth;
        int trans_num;
    private:
        ofstream mFile;
        const char* mName;
};

class AESL_TRANSACTION_PC {
    public:
        AESL_TRANSACTION_PC(const char* name) {
            mName = (char *)malloc((strlen(name)+1)*sizeof(char));            strcpy(mName,name);
        }
        ~AESL_TRANSACTION_PC() {
            free(mName);        }
    public:
        fstream file_token;
        char * mName;
};

extern void image_filter (
hls::stream<ap_axiu<32, 1, 1, 1 > > (&INPUT_STREAM),
hls::stream<ap_axiu<32, 1, 1, 1 > > (&OUTPUT_STREAM),
int rows,
int cols);
void AESL_WRAP_image_filter (
hls::stream<ap_axiu<32, 1, 1, 1 > > (&INPUT_STREAM),
hls::stream<ap_axiu<32, 1, 1, 1 > > (&OUTPUT_STREAM),
int rows,
int cols) {

    fstream wrapc_switch_file_token;

    wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");

    fstream wrapc_tv_switch_file_token;

    wrapc_tv_switch_file_token.open(".hls_cosim_wrapc_tv_switch.log");

    int AESL_i;

    if (wrapc_switch_file_token.good()) {

        static unsigned AESL_transaction_pc;

        string AESL_token;

        string AESL_num;

            FILE * communication_file;

            char get_com_str_set[4];

            char get_com_str[19];

            int get_com_int;

            do {

                do {

                    communication_file = fopen("com_wrapc_pc.tcl","r");

                } while (communication_file == NULL);

                fscanf(communication_file, "%s %s %d", get_com_str_set, get_com_str, &get_com_int);

                fclose(communication_file);

            } while (strcmp(get_com_str, "trans_num_wrapc_pc") != 0 || get_com_int < AESL_transaction_pc);

        static AESL_FILE_HANDLER aesl_fh;

        char str[100];

        char transaction_num_char[40];

        sprintf(transaction_num_char, "_%0d", AESL_transaction_pc);

        strcpy(str,AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_data_V);

        strcat(str,transaction_num_char);

        AESL_TRANSACTION_PC tvout_pc_OUTPUT_STREAM_V_data_V(str);

        strcpy(str,AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_keep_V);

        strcat(str,transaction_num_char);

        AESL_TRANSACTION_PC tvout_pc_OUTPUT_STREAM_V_keep_V(str);

        strcpy(str,AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_strb_V);

        strcat(str,transaction_num_char);

        AESL_TRANSACTION_PC tvout_pc_OUTPUT_STREAM_V_strb_V(str);

        strcpy(str,AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_user_V);

        strcat(str,transaction_num_char);

        AESL_TRANSACTION_PC tvout_pc_OUTPUT_STREAM_V_user_V(str);

        strcpy(str,AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_last_V);

        strcat(str,transaction_num_char);

        AESL_TRANSACTION_PC tvout_pc_OUTPUT_STREAM_V_last_V(str);

        strcpy(str,AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_id_V);

        strcat(str,transaction_num_char);

        AESL_TRANSACTION_PC tvout_pc_OUTPUT_STREAM_V_id_V(str);

        strcpy(str,AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_dest_V);

        strcat(str,transaction_num_char);

        AESL_TRANSACTION_PC tvout_pc_OUTPUT_STREAM_V_dest_V(str);

        aesl_fh.read(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_data_V, AESL_token); //[[transaction]]

        aesl_fh.read(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_data_V, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_data_V, AESL_token); //pop_size

            int aesl_tmp_1 = atoi(AESL_token.c_str());

            for (int i = 0 ; i < aesl_tmp_1  ; i++) {

                INPUT_STREAM.read();

            }

            aesl_fh.read(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_data_V, AESL_token); //[[/transaction]]

        }

        int aesl_tmp_4;

        int aesl_tmp_5 = 0;

        aesl_fh.read(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_data_V, AESL_token); //[[transaction]]

        aesl_fh.read(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_data_V, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_data_V, AESL_token); //pop_size

            aesl_tmp_4 = atoi(AESL_token.c_str());

            aesl_fh.read(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_data_V, AESL_token); //[[/transaction]]

        }

        std::vector<ap_axiu<32, 1, 1, 1 > > aesl_tmp_3;

        tvout_pc_OUTPUT_STREAM_V_data_V.file_token.open(tvout_pc_OUTPUT_STREAM_V_data_V.mName);

        if (!tvout_pc_OUTPUT_STREAM_V_data_V.file_token.good()) {

            cout<<"Failed to open tv file ."<<tvout_pc_OUTPUT_STREAM_V_data_V.mName<<endl;

            exit (1);

        }

        tvout_pc_OUTPUT_STREAM_V_data_V.file_token >> AESL_token;//[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           cout<<"Illegal file tvout_OUTPUT_STREAM_V_data_V format !"<<endl;

           exit(1);

        }

        tvout_pc_OUTPUT_STREAM_V_data_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvout_pc_OUTPUT_STREAM_V_data_V.file_token >> AESL_token;//data

            std::vector < sc_bv<32> > OUTPUT_STREAM_V_data_V_pc_buffer;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'OUTPUT_STREAM_V_data_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'OUTPUT_STREAM_V_data_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    OUTPUT_STREAM_V_data_V_pc_buffer.push_back( AESL_token.c_str() );

                    i++;

                }

                tvout_pc_OUTPUT_STREAM_V_data_V.file_token >> AESL_token;//data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || tvout_pc_OUTPUT_STREAM_V_data_V.file_token.eof()) {

                   cout<<"Illegal file tvout_OUTPUT_STREAM_V_data_V format !"<<endl;

                   exit(1);

                }

            }

            tvout_pc_OUTPUT_STREAM_V_data_V.file_token.close();

            strcpy(str,AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_data_V);

            strcat(str,transaction_num_char);

            remove(str);

            if (i != aesl_tmp_4) {

               aesl_tmp_4 = i;

            }

            if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4) {

                int aesl_tmp_3_size = aesl_tmp_3.size();

                for (int tmp_aesl_tmp_3 = 0 ; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size ; tmp_aesl_tmp_3 ++ ) {

                    ap_axiu<32, 1, 1, 1 > tmp;

                    aesl_tmp_3.push_back(tmp);

                }

            }

            if (i > 0) {

                sc_lv<32>* OUTPUT_STREAM_V_data_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<32>[aesl_tmp_4 - aesl_tmp_5];

                AESL_i = 0;

                for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)

                {

                for (int i_1 = 0; i_1 <= 0; i_1 += 1)

                {

                if(&(aesl_tmp_3[0].data) != NULL)

                {

                OUTPUT_STREAM_V_data_V_lv0_0_0_1_lv1_0_0_1[0 + AESL_i].range(31, 0) = sc_bv<32>(OUTPUT_STREAM_V_data_V_pc_buffer[0 + AESL_i].range(31, 0));

                }

                AESL_i++;

                }

                }

                {//bitslice

                {//celement

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

                    for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

                        if(&(aesl_tmp_3[0].data) != 0) {

                           aesl_tmp_3[i_0].data = (OUTPUT_STREAM_V_data_V_lv0_0_0_1_lv1_0_0_1[0 + AESL_i]).to_string(SC_BIN).c_str();

                        }

                        AESL_i++;

                    }

                }

                }//celement

                }//bitslice

                }

        }

        tvout_pc_OUTPUT_STREAM_V_keep_V.file_token.open(tvout_pc_OUTPUT_STREAM_V_keep_V.mName);

        if (!tvout_pc_OUTPUT_STREAM_V_keep_V.file_token.good()) {

            cout<<"Failed to open tv file ."<<tvout_pc_OUTPUT_STREAM_V_keep_V.mName<<endl;

            exit (1);

        }

        tvout_pc_OUTPUT_STREAM_V_keep_V.file_token >> AESL_token;//[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           cout<<"Illegal file tvout_OUTPUT_STREAM_V_keep_V format !"<<endl;

           exit(1);

        }

        tvout_pc_OUTPUT_STREAM_V_keep_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvout_pc_OUTPUT_STREAM_V_keep_V.file_token >> AESL_token;//data

            std::vector < sc_bv<4> > OUTPUT_STREAM_V_keep_V_pc_buffer;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'OUTPUT_STREAM_V_keep_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'OUTPUT_STREAM_V_keep_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    OUTPUT_STREAM_V_keep_V_pc_buffer.push_back( AESL_token.c_str() );

                    i++;

                }

                tvout_pc_OUTPUT_STREAM_V_keep_V.file_token >> AESL_token;//data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || tvout_pc_OUTPUT_STREAM_V_keep_V.file_token.eof()) {

                   cout<<"Illegal file tvout_OUTPUT_STREAM_V_keep_V format !"<<endl;

                   exit(1);

                }

            }

            tvout_pc_OUTPUT_STREAM_V_keep_V.file_token.close();

            strcpy(str,AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_keep_V);

            strcat(str,transaction_num_char);

            remove(str);

            if (i != aesl_tmp_4) {

               aesl_tmp_4 = i;

            }

            if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4) {

                int aesl_tmp_3_size = aesl_tmp_3.size();

                for (int tmp_aesl_tmp_3 = 0 ; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size ; tmp_aesl_tmp_3 ++ ) {

                    ap_axiu<32, 1, 1, 1 > tmp;

                    aesl_tmp_3.push_back(tmp);

                }

            }

            if (i > 0) {

                sc_lv<4>* OUTPUT_STREAM_V_keep_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<4>[aesl_tmp_4 - aesl_tmp_5];

                AESL_i = 0;

                for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)

                {

                for (int i_1 = 0; i_1 <= 0; i_1 += 1)

                {

                if(&(aesl_tmp_3[0].keep) != NULL)

                {

                OUTPUT_STREAM_V_keep_V_lv0_0_0_1_lv1_0_0_1[0 + AESL_i].range(3, 0) = sc_bv<4>(OUTPUT_STREAM_V_keep_V_pc_buffer[0 + AESL_i].range(3, 0));

                }

                AESL_i++;

                }

                }

                {//bitslice

                {//celement

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

                    for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

                        if(&(aesl_tmp_3[0].keep) != 0) {

                           aesl_tmp_3[i_0].keep = (OUTPUT_STREAM_V_keep_V_lv0_0_0_1_lv1_0_0_1[0 + AESL_i]).to_string(SC_BIN).c_str();

                        }

                        AESL_i++;

                    }

                }

                }//celement

                }//bitslice

                }

        }

        tvout_pc_OUTPUT_STREAM_V_strb_V.file_token.open(tvout_pc_OUTPUT_STREAM_V_strb_V.mName);

        if (!tvout_pc_OUTPUT_STREAM_V_strb_V.file_token.good()) {

            cout<<"Failed to open tv file ."<<tvout_pc_OUTPUT_STREAM_V_strb_V.mName<<endl;

            exit (1);

        }

        tvout_pc_OUTPUT_STREAM_V_strb_V.file_token >> AESL_token;//[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           cout<<"Illegal file tvout_OUTPUT_STREAM_V_strb_V format !"<<endl;

           exit(1);

        }

        tvout_pc_OUTPUT_STREAM_V_strb_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvout_pc_OUTPUT_STREAM_V_strb_V.file_token >> AESL_token;//data

            std::vector < sc_bv<4> > OUTPUT_STREAM_V_strb_V_pc_buffer;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'OUTPUT_STREAM_V_strb_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'OUTPUT_STREAM_V_strb_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    OUTPUT_STREAM_V_strb_V_pc_buffer.push_back( AESL_token.c_str() );

                    i++;

                }

                tvout_pc_OUTPUT_STREAM_V_strb_V.file_token >> AESL_token;//data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || tvout_pc_OUTPUT_STREAM_V_strb_V.file_token.eof()) {

                   cout<<"Illegal file tvout_OUTPUT_STREAM_V_strb_V format !"<<endl;

                   exit(1);

                }

            }

            tvout_pc_OUTPUT_STREAM_V_strb_V.file_token.close();

            strcpy(str,AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_strb_V);

            strcat(str,transaction_num_char);

            remove(str);

            if (i != aesl_tmp_4) {

               aesl_tmp_4 = i;

            }

            if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4) {

                int aesl_tmp_3_size = aesl_tmp_3.size();

                for (int tmp_aesl_tmp_3 = 0 ; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size ; tmp_aesl_tmp_3 ++ ) {

                    ap_axiu<32, 1, 1, 1 > tmp;

                    aesl_tmp_3.push_back(tmp);

                }

            }

            if (i > 0) {

                sc_lv<4>* OUTPUT_STREAM_V_strb_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<4>[aesl_tmp_4 - aesl_tmp_5];

                AESL_i = 0;

                for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)

                {

                for (int i_1 = 0; i_1 <= 0; i_1 += 1)

                {

                if(&(aesl_tmp_3[0].strb) != NULL)

                {

                OUTPUT_STREAM_V_strb_V_lv0_0_0_1_lv1_0_0_1[0 + AESL_i].range(3, 0) = sc_bv<4>(OUTPUT_STREAM_V_strb_V_pc_buffer[0 + AESL_i].range(3, 0));

                }

                AESL_i++;

                }

                }

                {//bitslice

                {//celement

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

                    for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

                        if(&(aesl_tmp_3[0].strb) != 0) {

                           aesl_tmp_3[i_0].strb = (OUTPUT_STREAM_V_strb_V_lv0_0_0_1_lv1_0_0_1[0 + AESL_i]).to_string(SC_BIN).c_str();

                        }

                        AESL_i++;

                    }

                }

                }//celement

                }//bitslice

                }

        }

        tvout_pc_OUTPUT_STREAM_V_user_V.file_token.open(tvout_pc_OUTPUT_STREAM_V_user_V.mName);

        if (!tvout_pc_OUTPUT_STREAM_V_user_V.file_token.good()) {

            cout<<"Failed to open tv file ."<<tvout_pc_OUTPUT_STREAM_V_user_V.mName<<endl;

            exit (1);

        }

        tvout_pc_OUTPUT_STREAM_V_user_V.file_token >> AESL_token;//[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           cout<<"Illegal file tvout_OUTPUT_STREAM_V_user_V format !"<<endl;

           exit(1);

        }

        tvout_pc_OUTPUT_STREAM_V_user_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvout_pc_OUTPUT_STREAM_V_user_V.file_token >> AESL_token;//data

            std::vector < sc_bv<1> > OUTPUT_STREAM_V_user_V_pc_buffer;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'OUTPUT_STREAM_V_user_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'OUTPUT_STREAM_V_user_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    OUTPUT_STREAM_V_user_V_pc_buffer.push_back( AESL_token.c_str() );

                    i++;

                }

                tvout_pc_OUTPUT_STREAM_V_user_V.file_token >> AESL_token;//data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || tvout_pc_OUTPUT_STREAM_V_user_V.file_token.eof()) {

                   cout<<"Illegal file tvout_OUTPUT_STREAM_V_user_V format !"<<endl;

                   exit(1);

                }

            }

            tvout_pc_OUTPUT_STREAM_V_user_V.file_token.close();

            strcpy(str,AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_user_V);

            strcat(str,transaction_num_char);

            remove(str);

            if (i != aesl_tmp_4) {

               aesl_tmp_4 = i;

            }

            if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4) {

                int aesl_tmp_3_size = aesl_tmp_3.size();

                for (int tmp_aesl_tmp_3 = 0 ; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size ; tmp_aesl_tmp_3 ++ ) {

                    ap_axiu<32, 1, 1, 1 > tmp;

                    aesl_tmp_3.push_back(tmp);

                }

            }

            if (i > 0) {

                sc_lv<1>* OUTPUT_STREAM_V_user_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<1>[aesl_tmp_4 - aesl_tmp_5];

                AESL_i = 0;

                for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)

                {

                for (int i_1 = 0; i_1 <= 0; i_1 += 1)

                {

                if(&(aesl_tmp_3[0].user) != NULL)

                {

                OUTPUT_STREAM_V_user_V_lv0_0_0_1_lv1_0_0_1[0 + AESL_i].range(0, 0) = sc_bv<1>(OUTPUT_STREAM_V_user_V_pc_buffer[0 + AESL_i].range(0, 0));

                }

                AESL_i++;

                }

                }

                {//bitslice

                {//celement

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

                    for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

                        if(&(aesl_tmp_3[0].user) != 0) {

                           aesl_tmp_3[i_0].user = (OUTPUT_STREAM_V_user_V_lv0_0_0_1_lv1_0_0_1[0 + AESL_i]).to_string(SC_BIN).c_str();

                        }

                        AESL_i++;

                    }

                }

                }//celement

                }//bitslice

                }

        }

        tvout_pc_OUTPUT_STREAM_V_last_V.file_token.open(tvout_pc_OUTPUT_STREAM_V_last_V.mName);

        if (!tvout_pc_OUTPUT_STREAM_V_last_V.file_token.good()) {

            cout<<"Failed to open tv file ."<<tvout_pc_OUTPUT_STREAM_V_last_V.mName<<endl;

            exit (1);

        }

        tvout_pc_OUTPUT_STREAM_V_last_V.file_token >> AESL_token;//[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           cout<<"Illegal file tvout_OUTPUT_STREAM_V_last_V format !"<<endl;

           exit(1);

        }

        tvout_pc_OUTPUT_STREAM_V_last_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvout_pc_OUTPUT_STREAM_V_last_V.file_token >> AESL_token;//data

            std::vector < sc_bv<1> > OUTPUT_STREAM_V_last_V_pc_buffer;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'OUTPUT_STREAM_V_last_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'OUTPUT_STREAM_V_last_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    OUTPUT_STREAM_V_last_V_pc_buffer.push_back( AESL_token.c_str() );

                    i++;

                }

                tvout_pc_OUTPUT_STREAM_V_last_V.file_token >> AESL_token;//data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || tvout_pc_OUTPUT_STREAM_V_last_V.file_token.eof()) {

                   cout<<"Illegal file tvout_OUTPUT_STREAM_V_last_V format !"<<endl;

                   exit(1);

                }

            }

            tvout_pc_OUTPUT_STREAM_V_last_V.file_token.close();

            strcpy(str,AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_last_V);

            strcat(str,transaction_num_char);

            remove(str);

            if (i != aesl_tmp_4) {

               aesl_tmp_4 = i;

            }

            if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4) {

                int aesl_tmp_3_size = aesl_tmp_3.size();

                for (int tmp_aesl_tmp_3 = 0 ; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size ; tmp_aesl_tmp_3 ++ ) {

                    ap_axiu<32, 1, 1, 1 > tmp;

                    aesl_tmp_3.push_back(tmp);

                }

            }

            if (i > 0) {

                sc_lv<1>* OUTPUT_STREAM_V_last_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<1>[aesl_tmp_4 - aesl_tmp_5];

                AESL_i = 0;

                for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)

                {

                for (int i_1 = 0; i_1 <= 0; i_1 += 1)

                {

                if(&(aesl_tmp_3[0].last) != NULL)

                {

                OUTPUT_STREAM_V_last_V_lv0_0_0_1_lv1_0_0_1[0 + AESL_i].range(0, 0) = sc_bv<1>(OUTPUT_STREAM_V_last_V_pc_buffer[0 + AESL_i].range(0, 0));

                }

                AESL_i++;

                }

                }

                {//bitslice

                {//celement

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

                    for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

                        if(&(aesl_tmp_3[0].last) != 0) {

                           aesl_tmp_3[i_0].last = (OUTPUT_STREAM_V_last_V_lv0_0_0_1_lv1_0_0_1[0 + AESL_i]).to_string(SC_BIN).c_str();

                        }

                        AESL_i++;

                    }

                }

                }//celement

                }//bitslice

                }

        }

        tvout_pc_OUTPUT_STREAM_V_id_V.file_token.open(tvout_pc_OUTPUT_STREAM_V_id_V.mName);

        if (!tvout_pc_OUTPUT_STREAM_V_id_V.file_token.good()) {

            cout<<"Failed to open tv file ."<<tvout_pc_OUTPUT_STREAM_V_id_V.mName<<endl;

            exit (1);

        }

        tvout_pc_OUTPUT_STREAM_V_id_V.file_token >> AESL_token;//[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           cout<<"Illegal file tvout_OUTPUT_STREAM_V_id_V format !"<<endl;

           exit(1);

        }

        tvout_pc_OUTPUT_STREAM_V_id_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvout_pc_OUTPUT_STREAM_V_id_V.file_token >> AESL_token;//data

            std::vector < sc_bv<1> > OUTPUT_STREAM_V_id_V_pc_buffer;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'OUTPUT_STREAM_V_id_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'OUTPUT_STREAM_V_id_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    OUTPUT_STREAM_V_id_V_pc_buffer.push_back( AESL_token.c_str() );

                    i++;

                }

                tvout_pc_OUTPUT_STREAM_V_id_V.file_token >> AESL_token;//data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || tvout_pc_OUTPUT_STREAM_V_id_V.file_token.eof()) {

                   cout<<"Illegal file tvout_OUTPUT_STREAM_V_id_V format !"<<endl;

                   exit(1);

                }

            }

            tvout_pc_OUTPUT_STREAM_V_id_V.file_token.close();

            strcpy(str,AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_id_V);

            strcat(str,transaction_num_char);

            remove(str);

            if (i != aesl_tmp_4) {

               aesl_tmp_4 = i;

            }

            if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4) {

                int aesl_tmp_3_size = aesl_tmp_3.size();

                for (int tmp_aesl_tmp_3 = 0 ; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size ; tmp_aesl_tmp_3 ++ ) {

                    ap_axiu<32, 1, 1, 1 > tmp;

                    aesl_tmp_3.push_back(tmp);

                }

            }

            if (i > 0) {

                sc_lv<1>* OUTPUT_STREAM_V_id_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<1>[aesl_tmp_4 - aesl_tmp_5];

                AESL_i = 0;

                for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)

                {

                for (int i_1 = 0; i_1 <= 0; i_1 += 1)

                {

                if(&(aesl_tmp_3[0].id) != NULL)

                {

                OUTPUT_STREAM_V_id_V_lv0_0_0_1_lv1_0_0_1[0 + AESL_i].range(0, 0) = sc_bv<1>(OUTPUT_STREAM_V_id_V_pc_buffer[0 + AESL_i].range(0, 0));

                }

                AESL_i++;

                }

                }

                {//bitslice

                {//celement

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

                    for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

                        if(&(aesl_tmp_3[0].id) != 0) {

                           aesl_tmp_3[i_0].id = (OUTPUT_STREAM_V_id_V_lv0_0_0_1_lv1_0_0_1[0 + AESL_i]).to_string(SC_BIN).c_str();

                        }

                        AESL_i++;

                    }

                }

                }//celement

                }//bitslice

                }

        }

        tvout_pc_OUTPUT_STREAM_V_dest_V.file_token.open(tvout_pc_OUTPUT_STREAM_V_dest_V.mName);

        if (!tvout_pc_OUTPUT_STREAM_V_dest_V.file_token.good()) {

            cout<<"Failed to open tv file ."<<tvout_pc_OUTPUT_STREAM_V_dest_V.mName<<endl;

            exit (1);

        }

        tvout_pc_OUTPUT_STREAM_V_dest_V.file_token >> AESL_token;//[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           cout<<"Illegal file tvout_OUTPUT_STREAM_V_dest_V format !"<<endl;

           exit(1);

        }

        tvout_pc_OUTPUT_STREAM_V_dest_V.file_token >> AESL_num;//transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            tvout_pc_OUTPUT_STREAM_V_dest_V.file_token >> AESL_token;//data

            std::vector < sc_bv<1> > OUTPUT_STREAM_V_dest_V_pc_buffer;

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'OUTPUT_STREAM_V_dest_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'OUTPUT_STREAM_V_dest_V', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    OUTPUT_STREAM_V_dest_V_pc_buffer.push_back( AESL_token.c_str() );

                    i++;

                }

                tvout_pc_OUTPUT_STREAM_V_dest_V.file_token >> AESL_token;//data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || tvout_pc_OUTPUT_STREAM_V_dest_V.file_token.eof()) {

                   cout<<"Illegal file tvout_OUTPUT_STREAM_V_dest_V format !"<<endl;

                   exit(1);

                }

            }

            tvout_pc_OUTPUT_STREAM_V_dest_V.file_token.close();

            strcpy(str,AUTOTB_TVOUT_PC_OUTPUT_STREAM_V_dest_V);

            strcat(str,transaction_num_char);

            remove(str);

            if (i != aesl_tmp_4) {

               aesl_tmp_4 = i;

            }

            if (aesl_tmp_4 > 0 && aesl_tmp_3.size() < aesl_tmp_4) {

                int aesl_tmp_3_size = aesl_tmp_3.size();

                for (int tmp_aesl_tmp_3 = 0 ; tmp_aesl_tmp_3 < aesl_tmp_4 - aesl_tmp_3_size ; tmp_aesl_tmp_3 ++ ) {

                    ap_axiu<32, 1, 1, 1 > tmp;

                    aesl_tmp_3.push_back(tmp);

                }

            }

            if (i > 0) {

                sc_lv<1>* OUTPUT_STREAM_V_dest_V_lv0_0_0_1_lv1_0_0_1 = new sc_lv<1>[aesl_tmp_4 - aesl_tmp_5];

                AESL_i = 0;

                for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1; i_0 += 1)

                {

                for (int i_1 = 0; i_1 <= 0; i_1 += 1)

                {

                if(&(aesl_tmp_3[0].dest) != NULL)

                {

                OUTPUT_STREAM_V_dest_V_lv0_0_0_1_lv1_0_0_1[0 + AESL_i].range(0, 0) = sc_bv<1>(OUTPUT_STREAM_V_dest_V_pc_buffer[0 + AESL_i].range(0, 0));

                }

                AESL_i++;

                }

                }

                {//bitslice

                {//celement

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

                    for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

                        if(&(aesl_tmp_3[0].dest) != 0) {

                           aesl_tmp_3[i_0].dest = (OUTPUT_STREAM_V_dest_V_lv0_0_0_1_lv1_0_0_1[0 + AESL_i]).to_string(SC_BIN).c_str();

                        }

                        AESL_i++;

                    }

                }

                }//celement

                }//bitslice

                }

        }

        for (int i = 0; i < aesl_tmp_4; i++) {

            OUTPUT_STREAM.write(aesl_tmp_3[i]);

        }

        AESL_transaction_pc ++ ;

    } else if (wrapc_tv_switch_file_token.good()){

        static unsigned AESL_transaction;

        char transaction_num_char[40];

        sprintf(transaction_num_char, "_%0d", AESL_transaction);

        char file_name_char[100];

        strcpy(file_name_char, AUTOTB_TVIN_INPUT_STREAM_V_data_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_INPUT_STREAM_V_data_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_INPUT_STREAM_V_keep_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_INPUT_STREAM_V_keep_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_INPUT_STREAM_V_strb_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_INPUT_STREAM_V_strb_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_INPUT_STREAM_V_user_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_INPUT_STREAM_V_user_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_INPUT_STREAM_V_last_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_INPUT_STREAM_V_last_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_INPUT_STREAM_V_id_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_INPUT_STREAM_V_id_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_INPUT_STREAM_V_dest_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_INPUT_STREAM_V_dest_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVOUT_OUTPUT_STREAM_V_data_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvout_OUTPUT_STREAM_V_data_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_OUTPUT_STREAM_V_data_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_OUTPUT_STREAM_V_data_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVOUT_OUTPUT_STREAM_V_keep_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvout_OUTPUT_STREAM_V_keep_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_OUTPUT_STREAM_V_keep_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_OUTPUT_STREAM_V_keep_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVOUT_OUTPUT_STREAM_V_strb_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvout_OUTPUT_STREAM_V_strb_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_OUTPUT_STREAM_V_strb_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_OUTPUT_STREAM_V_strb_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVOUT_OUTPUT_STREAM_V_user_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvout_OUTPUT_STREAM_V_user_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_OUTPUT_STREAM_V_user_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_OUTPUT_STREAM_V_user_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVOUT_OUTPUT_STREAM_V_last_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvout_OUTPUT_STREAM_V_last_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_OUTPUT_STREAM_V_last_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_OUTPUT_STREAM_V_last_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVOUT_OUTPUT_STREAM_V_id_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvout_OUTPUT_STREAM_V_id_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_OUTPUT_STREAM_V_id_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_OUTPUT_STREAM_V_id_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVOUT_OUTPUT_STREAM_V_dest_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvout_OUTPUT_STREAM_V_dest_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_OUTPUT_STREAM_V_dest_V);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_OUTPUT_STREAM_V_dest_V(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_rows);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_rows(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_cols);

        strcat(file_name_char, transaction_num_char);

        AESL_TRANSACTION tvin_cols(file_name_char);

        int leading_zero;

        std::vector<ap_axiu<32, 1, 1, 1 > > aesl_tmp_0;

        int aesl_tmp_1 = 0;

        while (!INPUT_STREAM.empty()) {

            aesl_tmp_0.push_back(INPUT_STREAM.read());

            aesl_tmp_1 ++;

        }

        std::vector<ap_axiu<32, 1, 1, 1 > > aesl_tmp_3;

        int aesl_tmp_4 = 0;

        while (!OUTPUT_STREAM.empty()) {

            aesl_tmp_3.push_back(OUTPUT_STREAM.read());

            aesl_tmp_4 ++;

        }

        tvin_rows.mFile = fopen(tvin_rows.mName, "w");

        if (tvin_rows.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvin_rows.mName<<endl;

            exit (1);

        }

        fprintf(tvin_rows.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<32> rows_tvin_wrapc_buffer;

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        sc_lv<32> rows_tmp_mem; 

        if(&(rows) != 0) {

        rows_tmp_mem = rows;

           rows_tvin_wrapc_buffer.range(31, 0) = rows_tmp_mem.range(31, 0 ) ;

        }

        AESL_i++;

        }//celement

        }//bitslice

        for (int i = 0; i < 1 ; i++) {

            fprintf(tvin_rows.mFile, "%s\n", (rows_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

        }

        fprintf(tvin_rows.mFile, "[[/transaction]] \n");

        fclose(tvin_rows.mFile);

        tvin_cols.mFile = fopen(tvin_cols.mName, "w");

        if (tvin_cols.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvin_cols.mName<<endl;

            exit (1);

        }

        fprintf(tvin_cols.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<32> cols_tvin_wrapc_buffer;

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        sc_lv<32> cols_tmp_mem; 

        if(&(cols) != 0) {

        cols_tmp_mem = cols;

           cols_tvin_wrapc_buffer.range(31, 0) = cols_tmp_mem.range(31, 0 ) ;

        }

        AESL_i++;

        }//celement

        }//bitslice

        for (int i = 0; i < 1 ; i++) {

            fprintf(tvin_cols.mFile, "%s\n", (cols_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

        }

        fprintf(tvin_cols.mFile, "[[/transaction]] \n");

        fclose(tvin_cols.mFile);

        for (int i = 0; i < aesl_tmp_1; i++) {

            INPUT_STREAM.write(aesl_tmp_0[i]);

        }

        image_filter(INPUT_STREAM,OUTPUT_STREAM,rows,cols);

        int aesl_tmp_2 = INPUT_STREAM.size();

        int aesl_tmp_5 = aesl_tmp_4;

        while (!OUTPUT_STREAM.empty()) {

            aesl_tmp_3.push_back(OUTPUT_STREAM.read());

            aesl_tmp_4 ++;

        }

        tvin_INPUT_STREAM_V_data_V.mFile = fopen(tvin_INPUT_STREAM_V_data_V.mName, "w");

        if (tvin_INPUT_STREAM_V_data_V.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvin_INPUT_STREAM_V_data_V.mName<<endl;

            exit (1);

        }

        fprintf(tvin_INPUT_STREAM_V_data_V.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<32> *INPUT_STREAM_V_data_V_tvin_wrapc_buffer = new sc_bv<32>[aesl_tmp_1 - aesl_tmp_2];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1 ; i_0+= 1) {

        sc_lv<32> INPUT_STREAM_V_data_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<32> INPUT_STREAM_V_data_V_tmp_mem; 

                if(&(aesl_tmp_0[0].data) != 0) {

                INPUT_STREAM_V_data_V_tmp_mem = (aesl_tmp_0[i_0].data).to_string(2).c_str();

                   INPUT_STREAM_V_data_V_tvin_wrapc_buffer[0 + AESL_i].range(31, 0) = INPUT_STREAM_V_data_V_tmp_mem.range(31, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2 ; i++) {

            fprintf(tvin_INPUT_STREAM_V_data_V.mFile, "%s\n", (INPUT_STREAM_V_data_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

        }

        fprintf(tvin_INPUT_STREAM_V_data_V.mFile, "[[/transaction]] \n");

        fclose(tvin_INPUT_STREAM_V_data_V.mFile);

        delete [] INPUT_STREAM_V_data_V_tvin_wrapc_buffer;

        tvin_INPUT_STREAM_V_keep_V.mFile = fopen(tvin_INPUT_STREAM_V_keep_V.mName, "w");

        if (tvin_INPUT_STREAM_V_keep_V.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvin_INPUT_STREAM_V_keep_V.mName<<endl;

            exit (1);

        }

        fprintf(tvin_INPUT_STREAM_V_keep_V.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<4> *INPUT_STREAM_V_keep_V_tvin_wrapc_buffer = new sc_bv<4>[aesl_tmp_1 - aesl_tmp_2];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1 ; i_0+= 1) {

        sc_lv<4> INPUT_STREAM_V_keep_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<4> INPUT_STREAM_V_keep_V_tmp_mem; 

                if(&(aesl_tmp_0[0].keep) != 0) {

                INPUT_STREAM_V_keep_V_tmp_mem = (aesl_tmp_0[i_0].keep).to_string(2).c_str();

                   INPUT_STREAM_V_keep_V_tvin_wrapc_buffer[0 + AESL_i].range(3, 0) = INPUT_STREAM_V_keep_V_tmp_mem.range(3, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2 ; i++) {

            fprintf(tvin_INPUT_STREAM_V_keep_V.mFile, "%s\n", (INPUT_STREAM_V_keep_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

        }

        fprintf(tvin_INPUT_STREAM_V_keep_V.mFile, "[[/transaction]] \n");

        fclose(tvin_INPUT_STREAM_V_keep_V.mFile);

        delete [] INPUT_STREAM_V_keep_V_tvin_wrapc_buffer;

        tvin_INPUT_STREAM_V_strb_V.mFile = fopen(tvin_INPUT_STREAM_V_strb_V.mName, "w");

        if (tvin_INPUT_STREAM_V_strb_V.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvin_INPUT_STREAM_V_strb_V.mName<<endl;

            exit (1);

        }

        fprintf(tvin_INPUT_STREAM_V_strb_V.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<4> *INPUT_STREAM_V_strb_V_tvin_wrapc_buffer = new sc_bv<4>[aesl_tmp_1 - aesl_tmp_2];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1 ; i_0+= 1) {

        sc_lv<4> INPUT_STREAM_V_strb_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<4> INPUT_STREAM_V_strb_V_tmp_mem; 

                if(&(aesl_tmp_0[0].strb) != 0) {

                INPUT_STREAM_V_strb_V_tmp_mem = (aesl_tmp_0[i_0].strb).to_string(2).c_str();

                   INPUT_STREAM_V_strb_V_tvin_wrapc_buffer[0 + AESL_i].range(3, 0) = INPUT_STREAM_V_strb_V_tmp_mem.range(3, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2 ; i++) {

            fprintf(tvin_INPUT_STREAM_V_strb_V.mFile, "%s\n", (INPUT_STREAM_V_strb_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

        }

        fprintf(tvin_INPUT_STREAM_V_strb_V.mFile, "[[/transaction]] \n");

        fclose(tvin_INPUT_STREAM_V_strb_V.mFile);

        delete [] INPUT_STREAM_V_strb_V_tvin_wrapc_buffer;

        tvin_INPUT_STREAM_V_user_V.mFile = fopen(tvin_INPUT_STREAM_V_user_V.mName, "w");

        if (tvin_INPUT_STREAM_V_user_V.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvin_INPUT_STREAM_V_user_V.mName<<endl;

            exit (1);

        }

        fprintf(tvin_INPUT_STREAM_V_user_V.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<1> *INPUT_STREAM_V_user_V_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_1 - aesl_tmp_2];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1 ; i_0+= 1) {

        sc_lv<1> INPUT_STREAM_V_user_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> INPUT_STREAM_V_user_V_tmp_mem; 

                if(&(aesl_tmp_0[0].user) != 0) {

                INPUT_STREAM_V_user_V_tmp_mem = (aesl_tmp_0[i_0].user).to_string(2).c_str();

                   INPUT_STREAM_V_user_V_tvin_wrapc_buffer[0 + AESL_i].range(0, 0) = INPUT_STREAM_V_user_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2 ; i++) {

            fprintf(tvin_INPUT_STREAM_V_user_V.mFile, "%s\n", (INPUT_STREAM_V_user_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

        }

        fprintf(tvin_INPUT_STREAM_V_user_V.mFile, "[[/transaction]] \n");

        fclose(tvin_INPUT_STREAM_V_user_V.mFile);

        delete [] INPUT_STREAM_V_user_V_tvin_wrapc_buffer;

        tvin_INPUT_STREAM_V_last_V.mFile = fopen(tvin_INPUT_STREAM_V_last_V.mName, "w");

        if (tvin_INPUT_STREAM_V_last_V.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvin_INPUT_STREAM_V_last_V.mName<<endl;

            exit (1);

        }

        fprintf(tvin_INPUT_STREAM_V_last_V.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<1> *INPUT_STREAM_V_last_V_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_1 - aesl_tmp_2];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1 ; i_0+= 1) {

        sc_lv<1> INPUT_STREAM_V_last_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> INPUT_STREAM_V_last_V_tmp_mem; 

                if(&(aesl_tmp_0[0].last) != 0) {

                INPUT_STREAM_V_last_V_tmp_mem = (aesl_tmp_0[i_0].last).to_string(2).c_str();

                   INPUT_STREAM_V_last_V_tvin_wrapc_buffer[0 + AESL_i].range(0, 0) = INPUT_STREAM_V_last_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2 ; i++) {

            fprintf(tvin_INPUT_STREAM_V_last_V.mFile, "%s\n", (INPUT_STREAM_V_last_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

        }

        fprintf(tvin_INPUT_STREAM_V_last_V.mFile, "[[/transaction]] \n");

        fclose(tvin_INPUT_STREAM_V_last_V.mFile);

        delete [] INPUT_STREAM_V_last_V_tvin_wrapc_buffer;

        tvin_INPUT_STREAM_V_id_V.mFile = fopen(tvin_INPUT_STREAM_V_id_V.mName, "w");

        if (tvin_INPUT_STREAM_V_id_V.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvin_INPUT_STREAM_V_id_V.mName<<endl;

            exit (1);

        }

        fprintf(tvin_INPUT_STREAM_V_id_V.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<1> *INPUT_STREAM_V_id_V_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_1 - aesl_tmp_2];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1 ; i_0+= 1) {

        sc_lv<1> INPUT_STREAM_V_id_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> INPUT_STREAM_V_id_V_tmp_mem; 

                if(&(aesl_tmp_0[0].id) != 0) {

                INPUT_STREAM_V_id_V_tmp_mem = (aesl_tmp_0[i_0].id).to_string(2).c_str();

                   INPUT_STREAM_V_id_V_tvin_wrapc_buffer[0 + AESL_i].range(0, 0) = INPUT_STREAM_V_id_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2 ; i++) {

            fprintf(tvin_INPUT_STREAM_V_id_V.mFile, "%s\n", (INPUT_STREAM_V_id_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

        }

        fprintf(tvin_INPUT_STREAM_V_id_V.mFile, "[[/transaction]] \n");

        fclose(tvin_INPUT_STREAM_V_id_V.mFile);

        delete [] INPUT_STREAM_V_id_V_tvin_wrapc_buffer;

        tvin_INPUT_STREAM_V_dest_V.mFile = fopen(tvin_INPUT_STREAM_V_dest_V.mName, "w");

        if (tvin_INPUT_STREAM_V_dest_V.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvin_INPUT_STREAM_V_dest_V.mName<<endl;

            exit (1);

        }

        fprintf(tvin_INPUT_STREAM_V_dest_V.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<1> *INPUT_STREAM_V_dest_V_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_1 - aesl_tmp_2];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1 ; i_0+= 1) {

        sc_lv<1> INPUT_STREAM_V_dest_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> INPUT_STREAM_V_dest_V_tmp_mem; 

                if(&(aesl_tmp_0[0].dest) != 0) {

                INPUT_STREAM_V_dest_V_tmp_mem = (aesl_tmp_0[i_0].dest).to_string(2).c_str();

                   INPUT_STREAM_V_dest_V_tvin_wrapc_buffer[0 + AESL_i].range(0, 0) = INPUT_STREAM_V_dest_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        for (int i = 0; i < aesl_tmp_1 - aesl_tmp_2 ; i++) {

            fprintf(tvin_INPUT_STREAM_V_dest_V.mFile, "%s\n", (INPUT_STREAM_V_dest_V_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

        }

        fprintf(tvin_INPUT_STREAM_V_dest_V.mFile, "[[/transaction]] \n");

        fclose(tvin_INPUT_STREAM_V_dest_V.mFile);

        delete [] INPUT_STREAM_V_dest_V_tvin_wrapc_buffer;

        tvout_OUTPUT_STREAM_V_data_V.mFile = fopen(tvout_OUTPUT_STREAM_V_data_V.mName, "w");

        if (tvout_OUTPUT_STREAM_V_data_V.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvout_OUTPUT_STREAM_V_data_V.mName<<endl;

            exit (1);

        }

        fprintf(tvout_OUTPUT_STREAM_V_data_V.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<32> *OUTPUT_STREAM_V_data_V_tvout_wrapc_buffer = new sc_bv<32>[aesl_tmp_4 - aesl_tmp_5];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

        sc_lv<32> OUTPUT_STREAM_V_data_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<32> OUTPUT_STREAM_V_data_V_tmp_mem; 

                if(&(aesl_tmp_3[0].data) != 0) {

                OUTPUT_STREAM_V_data_V_tmp_mem = (aesl_tmp_3[i_0].data).to_string(2).c_str();

                   OUTPUT_STREAM_V_data_V_tvout_wrapc_buffer[0 + AESL_i].range(31, 0) = OUTPUT_STREAM_V_data_V_tmp_mem.range(31, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5 ; i++) {

            fprintf(tvout_OUTPUT_STREAM_V_data_V.mFile, "%s\n", (OUTPUT_STREAM_V_data_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

        }

        fprintf(tvout_OUTPUT_STREAM_V_data_V.mFile, "[[/transaction]] \n");

        fclose(tvout_OUTPUT_STREAM_V_data_V.mFile);

        delete [] OUTPUT_STREAM_V_data_V_tvout_wrapc_buffer;

        tvout_OUTPUT_STREAM_V_keep_V.mFile = fopen(tvout_OUTPUT_STREAM_V_keep_V.mName, "w");

        if (tvout_OUTPUT_STREAM_V_keep_V.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvout_OUTPUT_STREAM_V_keep_V.mName<<endl;

            exit (1);

        }

        fprintf(tvout_OUTPUT_STREAM_V_keep_V.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<4> *OUTPUT_STREAM_V_keep_V_tvout_wrapc_buffer = new sc_bv<4>[aesl_tmp_4 - aesl_tmp_5];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

        sc_lv<4> OUTPUT_STREAM_V_keep_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<4> OUTPUT_STREAM_V_keep_V_tmp_mem; 

                if(&(aesl_tmp_3[0].keep) != 0) {

                OUTPUT_STREAM_V_keep_V_tmp_mem = (aesl_tmp_3[i_0].keep).to_string(2).c_str();

                   OUTPUT_STREAM_V_keep_V_tvout_wrapc_buffer[0 + AESL_i].range(3, 0) = OUTPUT_STREAM_V_keep_V_tmp_mem.range(3, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5 ; i++) {

            fprintf(tvout_OUTPUT_STREAM_V_keep_V.mFile, "%s\n", (OUTPUT_STREAM_V_keep_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

        }

        fprintf(tvout_OUTPUT_STREAM_V_keep_V.mFile, "[[/transaction]] \n");

        fclose(tvout_OUTPUT_STREAM_V_keep_V.mFile);

        delete [] OUTPUT_STREAM_V_keep_V_tvout_wrapc_buffer;

        tvout_OUTPUT_STREAM_V_strb_V.mFile = fopen(tvout_OUTPUT_STREAM_V_strb_V.mName, "w");

        if (tvout_OUTPUT_STREAM_V_strb_V.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvout_OUTPUT_STREAM_V_strb_V.mName<<endl;

            exit (1);

        }

        fprintf(tvout_OUTPUT_STREAM_V_strb_V.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<4> *OUTPUT_STREAM_V_strb_V_tvout_wrapc_buffer = new sc_bv<4>[aesl_tmp_4 - aesl_tmp_5];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

        sc_lv<4> OUTPUT_STREAM_V_strb_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<4> OUTPUT_STREAM_V_strb_V_tmp_mem; 

                if(&(aesl_tmp_3[0].strb) != 0) {

                OUTPUT_STREAM_V_strb_V_tmp_mem = (aesl_tmp_3[i_0].strb).to_string(2).c_str();

                   OUTPUT_STREAM_V_strb_V_tvout_wrapc_buffer[0 + AESL_i].range(3, 0) = OUTPUT_STREAM_V_strb_V_tmp_mem.range(3, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5 ; i++) {

            fprintf(tvout_OUTPUT_STREAM_V_strb_V.mFile, "%s\n", (OUTPUT_STREAM_V_strb_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

        }

        fprintf(tvout_OUTPUT_STREAM_V_strb_V.mFile, "[[/transaction]] \n");

        fclose(tvout_OUTPUT_STREAM_V_strb_V.mFile);

        delete [] OUTPUT_STREAM_V_strb_V_tvout_wrapc_buffer;

        tvout_OUTPUT_STREAM_V_user_V.mFile = fopen(tvout_OUTPUT_STREAM_V_user_V.mName, "w");

        if (tvout_OUTPUT_STREAM_V_user_V.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvout_OUTPUT_STREAM_V_user_V.mName<<endl;

            exit (1);

        }

        fprintf(tvout_OUTPUT_STREAM_V_user_V.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<1> *OUTPUT_STREAM_V_user_V_tvout_wrapc_buffer = new sc_bv<1>[aesl_tmp_4 - aesl_tmp_5];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

        sc_lv<1> OUTPUT_STREAM_V_user_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> OUTPUT_STREAM_V_user_V_tmp_mem; 

                if(&(aesl_tmp_3[0].user) != 0) {

                OUTPUT_STREAM_V_user_V_tmp_mem = (aesl_tmp_3[i_0].user).to_string(2).c_str();

                   OUTPUT_STREAM_V_user_V_tvout_wrapc_buffer[0 + AESL_i].range(0, 0) = OUTPUT_STREAM_V_user_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5 ; i++) {

            fprintf(tvout_OUTPUT_STREAM_V_user_V.mFile, "%s\n", (OUTPUT_STREAM_V_user_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

        }

        fprintf(tvout_OUTPUT_STREAM_V_user_V.mFile, "[[/transaction]] \n");

        fclose(tvout_OUTPUT_STREAM_V_user_V.mFile);

        delete [] OUTPUT_STREAM_V_user_V_tvout_wrapc_buffer;

        tvout_OUTPUT_STREAM_V_last_V.mFile = fopen(tvout_OUTPUT_STREAM_V_last_V.mName, "w");

        if (tvout_OUTPUT_STREAM_V_last_V.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvout_OUTPUT_STREAM_V_last_V.mName<<endl;

            exit (1);

        }

        fprintf(tvout_OUTPUT_STREAM_V_last_V.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<1> *OUTPUT_STREAM_V_last_V_tvout_wrapc_buffer = new sc_bv<1>[aesl_tmp_4 - aesl_tmp_5];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

        sc_lv<1> OUTPUT_STREAM_V_last_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> OUTPUT_STREAM_V_last_V_tmp_mem; 

                if(&(aesl_tmp_3[0].last) != 0) {

                OUTPUT_STREAM_V_last_V_tmp_mem = (aesl_tmp_3[i_0].last).to_string(2).c_str();

                   OUTPUT_STREAM_V_last_V_tvout_wrapc_buffer[0 + AESL_i].range(0, 0) = OUTPUT_STREAM_V_last_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5 ; i++) {

            fprintf(tvout_OUTPUT_STREAM_V_last_V.mFile, "%s\n", (OUTPUT_STREAM_V_last_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

        }

        fprintf(tvout_OUTPUT_STREAM_V_last_V.mFile, "[[/transaction]] \n");

        fclose(tvout_OUTPUT_STREAM_V_last_V.mFile);

        delete [] OUTPUT_STREAM_V_last_V_tvout_wrapc_buffer;

        tvout_OUTPUT_STREAM_V_id_V.mFile = fopen(tvout_OUTPUT_STREAM_V_id_V.mName, "w");

        if (tvout_OUTPUT_STREAM_V_id_V.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvout_OUTPUT_STREAM_V_id_V.mName<<endl;

            exit (1);

        }

        fprintf(tvout_OUTPUT_STREAM_V_id_V.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<1> *OUTPUT_STREAM_V_id_V_tvout_wrapc_buffer = new sc_bv<1>[aesl_tmp_4 - aesl_tmp_5];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

        sc_lv<1> OUTPUT_STREAM_V_id_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> OUTPUT_STREAM_V_id_V_tmp_mem; 

                if(&(aesl_tmp_3[0].id) != 0) {

                OUTPUT_STREAM_V_id_V_tmp_mem = (aesl_tmp_3[i_0].id).to_string(2).c_str();

                   OUTPUT_STREAM_V_id_V_tvout_wrapc_buffer[0 + AESL_i].range(0, 0) = OUTPUT_STREAM_V_id_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5 ; i++) {

            fprintf(tvout_OUTPUT_STREAM_V_id_V.mFile, "%s\n", (OUTPUT_STREAM_V_id_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

        }

        fprintf(tvout_OUTPUT_STREAM_V_id_V.mFile, "[[/transaction]] \n");

        fclose(tvout_OUTPUT_STREAM_V_id_V.mFile);

        delete [] OUTPUT_STREAM_V_id_V_tvout_wrapc_buffer;

        tvout_OUTPUT_STREAM_V_dest_V.mFile = fopen(tvout_OUTPUT_STREAM_V_dest_V.mName, "w");

        if (tvout_OUTPUT_STREAM_V_dest_V.mFile == NULL) {

            cout<<"Failed to open tv file ."<<tvout_OUTPUT_STREAM_V_dest_V.mName<<endl;

            exit (1);

        }

        fprintf(tvout_OUTPUT_STREAM_V_dest_V.mFile, "[[transaction]] %d\n", AESL_transaction);

        sc_bv<1> *OUTPUT_STREAM_V_dest_V_tvout_wrapc_buffer = new sc_bv<1>[aesl_tmp_4 - aesl_tmp_5];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

        sc_lv<1> OUTPUT_STREAM_V_dest_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> OUTPUT_STREAM_V_dest_V_tmp_mem; 

                if(&(aesl_tmp_3[0].dest) != 0) {

                OUTPUT_STREAM_V_dest_V_tmp_mem = (aesl_tmp_3[i_0].dest).to_string(2).c_str();

                   OUTPUT_STREAM_V_dest_V_tvout_wrapc_buffer[0 + AESL_i].range(0, 0) = OUTPUT_STREAM_V_dest_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        for (int i = 0; i < aesl_tmp_4 - aesl_tmp_5 ; i++) {

            fprintf(tvout_OUTPUT_STREAM_V_dest_V.mFile, "%s\n", (OUTPUT_STREAM_V_dest_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

        }

        fprintf(tvout_OUTPUT_STREAM_V_dest_V.mFile, "[[/transaction]] \n");

        fclose(tvout_OUTPUT_STREAM_V_dest_V.mFile);

        delete [] OUTPUT_STREAM_V_dest_V_tvout_wrapc_buffer;

        for (int i = 0; i < aesl_tmp_4; i++) {

            OUTPUT_STREAM.write(aesl_tmp_3[i]);

        }
        FILE* communication_file;
        do {
            communication_file = fopen("com_wrapc.tcl", "w");
        } while (communication_file == NULL);
        fprintf(communication_file, "set trans_num_wrapc %d \n\n", AESL_transaction);
        fclose(communication_file);
    if(AESL_transaction > 0) {
        FILE * communication_file;
        char get_com_str_set[4];
        char get_com_str[14];
        int get_com_int;
        do {
            do {
                communication_file = fopen("com_rtl_ready.tcl","r");
            } while (communication_file == NULL);
            fscanf(communication_file, "%s %s %d", get_com_str_set, get_com_str, &get_com_int);
            fclose(communication_file);
        } while (strcmp(get_com_str, "trans_num_rtl") != 0 || get_com_int < AESL_transaction);
    }

        if(AESL_transaction > 0) {

        sprintf(transaction_num_char, "_%0d", AESL_transaction - 1);

        strcpy(file_name_char, AUTOTB_TVIN_INPUT_STREAM_V_data_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_INPUT_STREAM_V_keep_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_INPUT_STREAM_V_strb_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_INPUT_STREAM_V_user_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_INPUT_STREAM_V_last_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_INPUT_STREAM_V_id_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_INPUT_STREAM_V_dest_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVOUT_OUTPUT_STREAM_V_data_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_OUTPUT_STREAM_V_data_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVOUT_OUTPUT_STREAM_V_keep_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_OUTPUT_STREAM_V_keep_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVOUT_OUTPUT_STREAM_V_strb_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_OUTPUT_STREAM_V_strb_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVOUT_OUTPUT_STREAM_V_user_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_OUTPUT_STREAM_V_user_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVOUT_OUTPUT_STREAM_V_last_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_OUTPUT_STREAM_V_last_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVOUT_OUTPUT_STREAM_V_id_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_OUTPUT_STREAM_V_id_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVOUT_OUTPUT_STREAM_V_dest_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_OUTPUT_STREAM_V_dest_V);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_rows);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);

        strcpy(file_name_char, AUTOTB_TVIN_cols);

        strcat(file_name_char, transaction_num_char);

        remove(file_name_char);
}

        AESL_transaction++;

    } else {

        static unsigned AESL_transaction;

        static AESL_FILE_HANDLER aesl_fh;

        char* wrapc_stream_size_in_INPUT_STREAM_V_data_V = new char[50];

        char* wrapc_stream_size_in_INPUT_STREAM_V_keep_V = new char[50];

        char* wrapc_stream_size_in_INPUT_STREAM_V_strb_V = new char[50];

        char* wrapc_stream_size_in_INPUT_STREAM_V_user_V = new char[50];

        char* wrapc_stream_size_in_INPUT_STREAM_V_last_V = new char[50];

        char* wrapc_stream_size_in_INPUT_STREAM_V_id_V = new char[50];

        char* wrapc_stream_size_in_INPUT_STREAM_V_dest_V = new char[50];

        char* wrapc_stream_size_out_OUTPUT_STREAM_V_data_V = new char[50];

        char* wrapc_stream_size_out_OUTPUT_STREAM_V_keep_V = new char[50];

        char* wrapc_stream_size_out_OUTPUT_STREAM_V_strb_V = new char[50];

        char* wrapc_stream_size_out_OUTPUT_STREAM_V_user_V = new char[50];

        char* wrapc_stream_size_out_OUTPUT_STREAM_V_last_V = new char[50];

        char* wrapc_stream_size_out_OUTPUT_STREAM_V_id_V = new char[50];

        char* wrapc_stream_size_out_OUTPUT_STREAM_V_dest_V = new char[50];

        static INTER_TCL_FILE tcl_file(INTER_TCL);


        int leading_zero;

        std::vector<ap_axiu<32, 1, 1, 1 > > aesl_tmp_0;

        int aesl_tmp_1 = 0;

        while (!INPUT_STREAM.empty()) {

            aesl_tmp_0.push_back(INPUT_STREAM.read());

            aesl_tmp_1 ++;

        }

        std::vector<ap_axiu<32, 1, 1, 1 > > aesl_tmp_3;

        int aesl_tmp_4 = 0;

        while (!OUTPUT_STREAM.empty()) {

            aesl_tmp_3.push_back(OUTPUT_STREAM.read());

            aesl_tmp_4 ++;

        }

        sc_bv<32> rows_tvin_wrapc_buffer;

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        sc_lv<32> rows_tmp_mem; 

        if(&(rows) != 0) {

        rows_tmp_mem = rows;

           rows_tvin_wrapc_buffer.range(31, 0) = rows_tmp_mem.range(31, 0 ) ;

        }

        AESL_i++;

        }//celement

        }//bitslice

        tcl_file.set_num(1,&tcl_file.rows_depth);

        sc_bv<32> cols_tvin_wrapc_buffer;

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        sc_lv<32> cols_tmp_mem; 

        if(&(cols) != 0) {

        cols_tmp_mem = cols;

           cols_tvin_wrapc_buffer.range(31, 0) = cols_tmp_mem.range(31, 0 ) ;

        }

        AESL_i++;

        }//celement

        }//bitslice

        tcl_file.set_num(1,&tcl_file.cols_depth);

        for (int i = 0; i < aesl_tmp_1; i++) {

            INPUT_STREAM.write(aesl_tmp_0[i]);

        }

        image_filter(INPUT_STREAM,OUTPUT_STREAM,rows,cols);

        int aesl_tmp_2 = INPUT_STREAM.size();

        int aesl_tmp_5 = aesl_tmp_4;

        while (!OUTPUT_STREAM.empty()) {

            aesl_tmp_3.push_back(OUTPUT_STREAM.read());

            aesl_tmp_4 ++;

        }

        sc_bv<32> *INPUT_STREAM_V_data_V_tvin_wrapc_buffer = new sc_bv<32>[aesl_tmp_1 - aesl_tmp_2];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1 ; i_0+= 1) {

        sc_lv<32> INPUT_STREAM_V_data_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<32> INPUT_STREAM_V_data_V_tmp_mem; 

                if(&(aesl_tmp_0[0].data) != 0) {

                INPUT_STREAM_V_data_V_tmp_mem = (aesl_tmp_0[i_0].data).to_string(2).c_str();

                   INPUT_STREAM_V_data_V_tvin_wrapc_buffer[0 + AESL_i].range(31, 0) = INPUT_STREAM_V_data_V_tmp_mem.range(31, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2,&tcl_file.INPUT_STREAM_V_data_V_depth);

        delete [] INPUT_STREAM_V_data_V_tvin_wrapc_buffer;

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_data_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_data_V, wrapc_stream_size_in_INPUT_STREAM_V_data_V);

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_data_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_data_V, wrapc_stream_size_in_INPUT_STREAM_V_data_V);

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_data_V, "[[/transaction]] \n");

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_data_V, wrapc_stream_size_in_INPUT_STREAM_V_data_V);

        sc_bv<4> *INPUT_STREAM_V_keep_V_tvin_wrapc_buffer = new sc_bv<4>[aesl_tmp_1 - aesl_tmp_2];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1 ; i_0+= 1) {

        sc_lv<4> INPUT_STREAM_V_keep_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<4> INPUT_STREAM_V_keep_V_tmp_mem; 

                if(&(aesl_tmp_0[0].keep) != 0) {

                INPUT_STREAM_V_keep_V_tmp_mem = (aesl_tmp_0[i_0].keep).to_string(2).c_str();

                   INPUT_STREAM_V_keep_V_tvin_wrapc_buffer[0 + AESL_i].range(3, 0) = INPUT_STREAM_V_keep_V_tmp_mem.range(3, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2,&tcl_file.INPUT_STREAM_V_keep_V_depth);

        delete [] INPUT_STREAM_V_keep_V_tvin_wrapc_buffer;

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_keep_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_keep_V, wrapc_stream_size_in_INPUT_STREAM_V_keep_V);

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_keep_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_keep_V, wrapc_stream_size_in_INPUT_STREAM_V_keep_V);

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_keep_V, "[[/transaction]] \n");

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_keep_V, wrapc_stream_size_in_INPUT_STREAM_V_keep_V);

        sc_bv<4> *INPUT_STREAM_V_strb_V_tvin_wrapc_buffer = new sc_bv<4>[aesl_tmp_1 - aesl_tmp_2];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1 ; i_0+= 1) {

        sc_lv<4> INPUT_STREAM_V_strb_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<4> INPUT_STREAM_V_strb_V_tmp_mem; 

                if(&(aesl_tmp_0[0].strb) != 0) {

                INPUT_STREAM_V_strb_V_tmp_mem = (aesl_tmp_0[i_0].strb).to_string(2).c_str();

                   INPUT_STREAM_V_strb_V_tvin_wrapc_buffer[0 + AESL_i].range(3, 0) = INPUT_STREAM_V_strb_V_tmp_mem.range(3, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2,&tcl_file.INPUT_STREAM_V_strb_V_depth);

        delete [] INPUT_STREAM_V_strb_V_tvin_wrapc_buffer;

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_strb_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_strb_V, wrapc_stream_size_in_INPUT_STREAM_V_strb_V);

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_strb_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_strb_V, wrapc_stream_size_in_INPUT_STREAM_V_strb_V);

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_strb_V, "[[/transaction]] \n");

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_strb_V, wrapc_stream_size_in_INPUT_STREAM_V_strb_V);

        sc_bv<1> *INPUT_STREAM_V_user_V_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_1 - aesl_tmp_2];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1 ; i_0+= 1) {

        sc_lv<1> INPUT_STREAM_V_user_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> INPUT_STREAM_V_user_V_tmp_mem; 

                if(&(aesl_tmp_0[0].user) != 0) {

                INPUT_STREAM_V_user_V_tmp_mem = (aesl_tmp_0[i_0].user).to_string(2).c_str();

                   INPUT_STREAM_V_user_V_tvin_wrapc_buffer[0 + AESL_i].range(0, 0) = INPUT_STREAM_V_user_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2,&tcl_file.INPUT_STREAM_V_user_V_depth);

        delete [] INPUT_STREAM_V_user_V_tvin_wrapc_buffer;

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_user_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_user_V, wrapc_stream_size_in_INPUT_STREAM_V_user_V);

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_user_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_user_V, wrapc_stream_size_in_INPUT_STREAM_V_user_V);

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_user_V, "[[/transaction]] \n");

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_user_V, wrapc_stream_size_in_INPUT_STREAM_V_user_V);

        sc_bv<1> *INPUT_STREAM_V_last_V_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_1 - aesl_tmp_2];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1 ; i_0+= 1) {

        sc_lv<1> INPUT_STREAM_V_last_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> INPUT_STREAM_V_last_V_tmp_mem; 

                if(&(aesl_tmp_0[0].last) != 0) {

                INPUT_STREAM_V_last_V_tmp_mem = (aesl_tmp_0[i_0].last).to_string(2).c_str();

                   INPUT_STREAM_V_last_V_tvin_wrapc_buffer[0 + AESL_i].range(0, 0) = INPUT_STREAM_V_last_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2,&tcl_file.INPUT_STREAM_V_last_V_depth);

        delete [] INPUT_STREAM_V_last_V_tvin_wrapc_buffer;

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_last_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_last_V, wrapc_stream_size_in_INPUT_STREAM_V_last_V);

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_last_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_last_V, wrapc_stream_size_in_INPUT_STREAM_V_last_V);

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_last_V, "[[/transaction]] \n");

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_last_V, wrapc_stream_size_in_INPUT_STREAM_V_last_V);

        sc_bv<1> *INPUT_STREAM_V_id_V_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_1 - aesl_tmp_2];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1 ; i_0+= 1) {

        sc_lv<1> INPUT_STREAM_V_id_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> INPUT_STREAM_V_id_V_tmp_mem; 

                if(&(aesl_tmp_0[0].id) != 0) {

                INPUT_STREAM_V_id_V_tmp_mem = (aesl_tmp_0[i_0].id).to_string(2).c_str();

                   INPUT_STREAM_V_id_V_tvin_wrapc_buffer[0 + AESL_i].range(0, 0) = INPUT_STREAM_V_id_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2,&tcl_file.INPUT_STREAM_V_id_V_depth);

        delete [] INPUT_STREAM_V_id_V_tvin_wrapc_buffer;

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_id_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_id_V, wrapc_stream_size_in_INPUT_STREAM_V_id_V);

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_id_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_id_V, wrapc_stream_size_in_INPUT_STREAM_V_id_V);

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_id_V, "[[/transaction]] \n");

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_id_V, wrapc_stream_size_in_INPUT_STREAM_V_id_V);

        sc_bv<1> *INPUT_STREAM_V_dest_V_tvin_wrapc_buffer = new sc_bv<1>[aesl_tmp_1 - aesl_tmp_2];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= aesl_tmp_1 - aesl_tmp_2 - 1 ; i_0+= 1) {

        sc_lv<1> INPUT_STREAM_V_dest_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> INPUT_STREAM_V_dest_V_tmp_mem; 

                if(&(aesl_tmp_0[0].dest) != 0) {

                INPUT_STREAM_V_dest_V_tmp_mem = (aesl_tmp_0[i_0].dest).to_string(2).c_str();

                   INPUT_STREAM_V_dest_V_tvin_wrapc_buffer[0 + AESL_i].range(0, 0) = INPUT_STREAM_V_dest_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        tcl_file.set_num(aesl_tmp_1 - aesl_tmp_2,&tcl_file.INPUT_STREAM_V_dest_V_depth);

        delete [] INPUT_STREAM_V_dest_V_tvin_wrapc_buffer;

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_dest_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_dest_V, wrapc_stream_size_in_INPUT_STREAM_V_dest_V);

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_dest_V, "%d\n", aesl_tmp_1 - aesl_tmp_2);

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_dest_V, wrapc_stream_size_in_INPUT_STREAM_V_dest_V);

        sprintf(wrapc_stream_size_in_INPUT_STREAM_V_dest_V, "[[/transaction]] \n");

        aesl_fh.write(WRAPC_STREAM_SIZE_IN_INPUT_STREAM_V_dest_V, wrapc_stream_size_in_INPUT_STREAM_V_dest_V);

        sc_bv<32> *OUTPUT_STREAM_V_data_V_tvout_wrapc_buffer = new sc_bv<32>[aesl_tmp_4 - aesl_tmp_5];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

        sc_lv<32> OUTPUT_STREAM_V_data_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<32> OUTPUT_STREAM_V_data_V_tmp_mem; 

                if(&(aesl_tmp_3[0].data) != 0) {

                OUTPUT_STREAM_V_data_V_tmp_mem = (aesl_tmp_3[i_0].data).to_string(2).c_str();

                   OUTPUT_STREAM_V_data_V_tvout_wrapc_buffer[0 + AESL_i].range(31, 0) = OUTPUT_STREAM_V_data_V_tmp_mem.range(31, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5,&tcl_file.OUTPUT_STREAM_V_data_V_depth);

        delete [] OUTPUT_STREAM_V_data_V_tvout_wrapc_buffer;

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_data_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_data_V, wrapc_stream_size_out_OUTPUT_STREAM_V_data_V);

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_data_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_data_V, wrapc_stream_size_out_OUTPUT_STREAM_V_data_V);

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_data_V, "[[/transaction]] \n");

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_data_V, wrapc_stream_size_out_OUTPUT_STREAM_V_data_V);

        sc_bv<4> *OUTPUT_STREAM_V_keep_V_tvout_wrapc_buffer = new sc_bv<4>[aesl_tmp_4 - aesl_tmp_5];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

        sc_lv<4> OUTPUT_STREAM_V_keep_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<4> OUTPUT_STREAM_V_keep_V_tmp_mem; 

                if(&(aesl_tmp_3[0].keep) != 0) {

                OUTPUT_STREAM_V_keep_V_tmp_mem = (aesl_tmp_3[i_0].keep).to_string(2).c_str();

                   OUTPUT_STREAM_V_keep_V_tvout_wrapc_buffer[0 + AESL_i].range(3, 0) = OUTPUT_STREAM_V_keep_V_tmp_mem.range(3, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5,&tcl_file.OUTPUT_STREAM_V_keep_V_depth);

        delete [] OUTPUT_STREAM_V_keep_V_tvout_wrapc_buffer;

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_keep_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_keep_V, wrapc_stream_size_out_OUTPUT_STREAM_V_keep_V);

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_keep_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_keep_V, wrapc_stream_size_out_OUTPUT_STREAM_V_keep_V);

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_keep_V, "[[/transaction]] \n");

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_keep_V, wrapc_stream_size_out_OUTPUT_STREAM_V_keep_V);

        sc_bv<4> *OUTPUT_STREAM_V_strb_V_tvout_wrapc_buffer = new sc_bv<4>[aesl_tmp_4 - aesl_tmp_5];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

        sc_lv<4> OUTPUT_STREAM_V_strb_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<4> OUTPUT_STREAM_V_strb_V_tmp_mem; 

                if(&(aesl_tmp_3[0].strb) != 0) {

                OUTPUT_STREAM_V_strb_V_tmp_mem = (aesl_tmp_3[i_0].strb).to_string(2).c_str();

                   OUTPUT_STREAM_V_strb_V_tvout_wrapc_buffer[0 + AESL_i].range(3, 0) = OUTPUT_STREAM_V_strb_V_tmp_mem.range(3, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5,&tcl_file.OUTPUT_STREAM_V_strb_V_depth);

        delete [] OUTPUT_STREAM_V_strb_V_tvout_wrapc_buffer;

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_strb_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_strb_V, wrapc_stream_size_out_OUTPUT_STREAM_V_strb_V);

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_strb_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_strb_V, wrapc_stream_size_out_OUTPUT_STREAM_V_strb_V);

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_strb_V, "[[/transaction]] \n");

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_strb_V, wrapc_stream_size_out_OUTPUT_STREAM_V_strb_V);

        sc_bv<1> *OUTPUT_STREAM_V_user_V_tvout_wrapc_buffer = new sc_bv<1>[aesl_tmp_4 - aesl_tmp_5];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

        sc_lv<1> OUTPUT_STREAM_V_user_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> OUTPUT_STREAM_V_user_V_tmp_mem; 

                if(&(aesl_tmp_3[0].user) != 0) {

                OUTPUT_STREAM_V_user_V_tmp_mem = (aesl_tmp_3[i_0].user).to_string(2).c_str();

                   OUTPUT_STREAM_V_user_V_tvout_wrapc_buffer[0 + AESL_i].range(0, 0) = OUTPUT_STREAM_V_user_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5,&tcl_file.OUTPUT_STREAM_V_user_V_depth);

        delete [] OUTPUT_STREAM_V_user_V_tvout_wrapc_buffer;

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_user_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_user_V, wrapc_stream_size_out_OUTPUT_STREAM_V_user_V);

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_user_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_user_V, wrapc_stream_size_out_OUTPUT_STREAM_V_user_V);

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_user_V, "[[/transaction]] \n");

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_user_V, wrapc_stream_size_out_OUTPUT_STREAM_V_user_V);

        sc_bv<1> *OUTPUT_STREAM_V_last_V_tvout_wrapc_buffer = new sc_bv<1>[aesl_tmp_4 - aesl_tmp_5];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

        sc_lv<1> OUTPUT_STREAM_V_last_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> OUTPUT_STREAM_V_last_V_tmp_mem; 

                if(&(aesl_tmp_3[0].last) != 0) {

                OUTPUT_STREAM_V_last_V_tmp_mem = (aesl_tmp_3[i_0].last).to_string(2).c_str();

                   OUTPUT_STREAM_V_last_V_tvout_wrapc_buffer[0 + AESL_i].range(0, 0) = OUTPUT_STREAM_V_last_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5,&tcl_file.OUTPUT_STREAM_V_last_V_depth);

        delete [] OUTPUT_STREAM_V_last_V_tvout_wrapc_buffer;

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_last_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_last_V, wrapc_stream_size_out_OUTPUT_STREAM_V_last_V);

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_last_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_last_V, wrapc_stream_size_out_OUTPUT_STREAM_V_last_V);

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_last_V, "[[/transaction]] \n");

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_last_V, wrapc_stream_size_out_OUTPUT_STREAM_V_last_V);

        sc_bv<1> *OUTPUT_STREAM_V_id_V_tvout_wrapc_buffer = new sc_bv<1>[aesl_tmp_4 - aesl_tmp_5];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

        sc_lv<1> OUTPUT_STREAM_V_id_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> OUTPUT_STREAM_V_id_V_tmp_mem; 

                if(&(aesl_tmp_3[0].id) != 0) {

                OUTPUT_STREAM_V_id_V_tmp_mem = (aesl_tmp_3[i_0].id).to_string(2).c_str();

                   OUTPUT_STREAM_V_id_V_tvout_wrapc_buffer[0 + AESL_i].range(0, 0) = OUTPUT_STREAM_V_id_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5,&tcl_file.OUTPUT_STREAM_V_id_V_depth);

        delete [] OUTPUT_STREAM_V_id_V_tvout_wrapc_buffer;

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_id_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_id_V, wrapc_stream_size_out_OUTPUT_STREAM_V_id_V);

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_id_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_id_V, wrapc_stream_size_out_OUTPUT_STREAM_V_id_V);

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_id_V, "[[/transaction]] \n");

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_id_V, wrapc_stream_size_out_OUTPUT_STREAM_V_id_V);

        sc_bv<1> *OUTPUT_STREAM_V_dest_V_tvout_wrapc_buffer = new sc_bv<1>[aesl_tmp_4 - aesl_tmp_5];

        {//bitslice

        {//celement

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = aesl_tmp_5; i_0 <= aesl_tmp_4 - 1 ; i_0+= 1) {

        sc_lv<1> OUTPUT_STREAM_V_dest_V_tmp_mem; 

            for (int i_1 = 0; i_1 <= 0 ; i_1+= 1) {

            sc_lv<1> OUTPUT_STREAM_V_dest_V_tmp_mem; 

                if(&(aesl_tmp_3[0].dest) != 0) {

                OUTPUT_STREAM_V_dest_V_tmp_mem = (aesl_tmp_3[i_0].dest).to_string(2).c_str();

                   OUTPUT_STREAM_V_dest_V_tvout_wrapc_buffer[0 + AESL_i].range(0, 0) = OUTPUT_STREAM_V_dest_V_tmp_mem.range(0, 0 ) ;

                }

                AESL_i++;

            }

        }

        }//celement

        }//bitslice

        tcl_file.set_num(aesl_tmp_4 - aesl_tmp_5,&tcl_file.OUTPUT_STREAM_V_dest_V_depth);

        delete [] OUTPUT_STREAM_V_dest_V_tvout_wrapc_buffer;

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_dest_V, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_dest_V, wrapc_stream_size_out_OUTPUT_STREAM_V_dest_V);

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_dest_V, "%d\n", aesl_tmp_4 - aesl_tmp_5);

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_dest_V, wrapc_stream_size_out_OUTPUT_STREAM_V_dest_V);

        sprintf(wrapc_stream_size_out_OUTPUT_STREAM_V_dest_V, "[[/transaction]] \n");

        aesl_fh.write(WRAPC_STREAM_SIZE_OUT_OUTPUT_STREAM_V_dest_V, wrapc_stream_size_out_OUTPUT_STREAM_V_dest_V);

        for (int i = 0; i < aesl_tmp_4; i++) {

            OUTPUT_STREAM.write(aesl_tmp_3[i]);

        }

        delete [] wrapc_stream_size_in_INPUT_STREAM_V_data_V;

        delete [] wrapc_stream_size_in_INPUT_STREAM_V_keep_V;

        delete [] wrapc_stream_size_in_INPUT_STREAM_V_strb_V;

        delete [] wrapc_stream_size_in_INPUT_STREAM_V_user_V;

        delete [] wrapc_stream_size_in_INPUT_STREAM_V_last_V;

        delete [] wrapc_stream_size_in_INPUT_STREAM_V_id_V;

        delete [] wrapc_stream_size_in_INPUT_STREAM_V_dest_V;

        delete [] wrapc_stream_size_out_OUTPUT_STREAM_V_data_V;

        delete [] wrapc_stream_size_out_OUTPUT_STREAM_V_keep_V;

        delete [] wrapc_stream_size_out_OUTPUT_STREAM_V_strb_V;

        delete [] wrapc_stream_size_out_OUTPUT_STREAM_V_user_V;

        delete [] wrapc_stream_size_out_OUTPUT_STREAM_V_last_V;

        delete [] wrapc_stream_size_out_OUTPUT_STREAM_V_id_V;

        delete [] wrapc_stream_size_out_OUTPUT_STREAM_V_dest_V;

        AESL_transaction++;

        tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

    }
}

